@model TubsWeb.ViewModels.SightingViewModel
@using Newtonsoft.Json
@using System.Web.Optimization

@{ 
    // Switch to full width layout
    ViewBag.UseFluid = true;
    ViewBag.Title = "Edit GEN-1 Sightings"; 
}

@* For now, create this in the View. *@
@{
    IEnumerable<Tuple<string, string>> crumbs = new List<Tuple<string, string>>()
    {
        Tuple.Create(Url.RouteUrl("TripList"), "Trips"),
        Tuple.Create(Url.Action("Details", "Trip", new { tripId = Model.TripId }), Model.TripNumber ?? "This Trip"),
        Tuple.Create(Url.Action("Sightings", "Gen1", new { tripId = Model.TripId }), "Sightings"),
        Tuple.Create("#", "Edit GEN-1 Sightings")
    };
}

@{ 
    Html.RenderPartial("_BreadCrumbs", crumbs);
    // Country code datalist
    Html.RenderPartial("_CountryCodes");
}

@* 
    * By keeping the buttons and text in the same paragraph container, there's no positional change/re-rendering of form
    * when the first 'dirtying' change occurs.
    *@
<p>
    <button id="saveButton" type="submit" class="btn btn-primary" data-bind="activity: $root.saveCommand.isExecuting, command: $root.saveCommand">Save</button>
    <button id="reloadButton" type="button" class="btn btn-warning" data-bind="activity: $root.reloadCommand.isExecuting, command: $root.reloadCommand">
        <i class="icon-refresh icon-white"></i>&nbsp;Reload
    </button>
    <span data-bind="visible: $root.isDirty" class="text-warning">You have unsaved changes.</span>
</p>
<hr />
<table class="table table-bordered table-condensed table-striped">
    <thead>
        <tr>
            <th class="input-mini">Date</th>
            <th class="input-mini">Time</th>
            <th class="input-small">Latitude</th>
            <th class="input-small">Longitude</th>
            <th class="input-medium">Name</th>
            <th class="input-mini">IRCS</th>
            <th class="input-mini">Flag</th>
            <th class="input-mini">Type</th>
            <th>Bearing</th>
            <th>Distance</th>
            <th>Action</th>
            <th>Photo</th>
            <th class="input-xlarge">Comments</th>
            <th>&nbsp;</th>
        </tr>
    </thead>
    <tbody data-bind="foreach: Sightings" class="lineitems">
        <tr data-bind="css: { warning: (isDirty() || 0 === Id) }">               
            <td><input type="text" data-bind="value: DateOnly.formattedDate, uniqueName: true" class="input-mini" /></td>
            <td><input type="text" data-bind="value: TimeOnly, uniqueName: true" class="input-mini" /></td>
            <td><input type="text" data-bind="value: Latitude, uniqueName: true" class="input-small" /></td>
            <td><input type="text" data-bind="value: Longitude, uniqueName: true" class="input-small" /></td>
            <td><input type="text" data-bind="value: Name, uniqueName: true" class="input-medium vesselName" /></td>
            <td><input type="text" data-bind="value: Ircs, uniqueName: true" class="input-mini" /></td>
            <td><input type="text" data-bind="value: CountryCode, uniqueName: true" class="input-mini" list="countryCodes" /></td>
            <td>
                <select data-bind="value: TypeCode, options: $root.TypeCodes" class="input-mini"></select>
            </td>
            <td><input type="number" data-bind="value: Bearing, uniqueName: true" class="input-mini" /></td>
            <td><input type="number" step="any" data-bind="value: Distance, uniqueName: true" class="input-mini" /></td>
            <td>
                <select data-bind="value: ActionCode, options: $root.ActionCodes" class="input-mini"></select>
            </td>
            <td><input type="text" data-bind="value: PhotoFrame, uniqueName: true" class="input-mini" /></td>
            <td><input type="text" data-bind="value: Comments, uniqueName: true" class="input-xlarge"/></td>
            <td>
                @* Delete button is taken out of the tab order to prevent accidents *@
                <button type="button"
                        tabindex="3000"
                        class="removeItem btn btn-danger" 
                        rel="tooltip" 
                        title="Click to remove row">
                    <i class="icon-trash icon-white"></i>
                </button>
            </td>
        </tr>        
    </tbody>
</table>
<button id="btnAddSighting" type="button" class="btn btn-info"><i class="icon-plus-sign icon-white"></i> Add Sighting</button>

@*
<pre data-bind="text: ko.toJSON($root, null, 2)"></pre>
*@

@section AdditionalScripts {
    @{ var modelAsJson = Html.Raw(JsonConvert.SerializeObject(Model)); }
    
    @Scripts.Render("~/bundles/knockout")
    <script src="~/Scripts/spc.utilities.js"></script>
    <!-- Ajax data layer -->
    <script src="~/Scripts/App/errorlogger.js"></script>
    <script src="~/Scripts/App/datacontext.js"></script>
    <script src="~/Scripts/App/vm.sighting.js"></script>
    <script>
        $(function () {
            $(document).on('keypress', 'enter', function () {
                // It would be cool to convert this to a tab keypress, but I'll be happy to
                // prevent unintended saves for now.
                return false;
            });

            var viewModel = new tubs.SightingViewModel(@modelAsJson);
            viewModel.clearDirtyFlag();
            ko.applyBindings(viewModel);

            $(".lineitems").on("click", ".removeItem", function () {
                viewModel.removeEvent(ko.dataFor(this));
            });

            $("#btnAddSighting").on("click", function () {
                viewModel.addEvent();
            });

            /* TODO:  Attach a vessel lookup typeahead to anything with the .vesselName class */

            tl.pg.init();

            /* TODO: Extract this into a common script for the whole application */
            window.onbeforeunload = function(e) {
                if (viewModel.isDirty())
                {
                    if (!e) e = window.event;
                    // IE only?
                    e.cancelBubble = true;
                    e.returnValue = "Leaving the page will discard unsaved changes.";
                    // Firefox?
                    if (e.stopPropagation)
                    {
                        e.stopPropagation();
                        e.preventDefault();
                    }

                    return "Leaving the page will discard unsaved changes.";
                }
            };  
        });
    </script>
}
