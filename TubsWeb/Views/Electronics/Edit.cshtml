@model TubsWeb.ViewModels.ElectronicsViewModel
@using Newtonsoft.Json
@using System.Web.Optimization

@{
    // Due to large fields and use of tab container, UX is better with the fluid layout
    ViewBag.UseFluid = true;
    ViewBag.Title = String.Format("{0}: Electronics", Model.TripNumber);
}
@* For now, create this in the View. *@
@{
    IEnumerable<Tuple<string, string>> crumbs = new List<Tuple<string, string>>()
    {
        Tuple.Create(Url.RouteUrl("TripList"), "Trips"),
        Tuple.Create(Url.Action("Details", "Trip", new { tripId = Model.TripId }), Model.TripNumber),
        Tuple.Create(Url.Action("Index", "Electronics", new { tripId = Model.TripId }), "Electronics"),
        Tuple.Create("#", "Edit")
    };
}

@{ Html.RenderPartial("_BreadCrumbs", crumbs); }

<p>
    <button id="saveButton" type="submit" class="btn btn-primary" data-bind="activity: $root.saveCommand.isExecuting, command: $root.saveCommand">
        <i class="icon-save icon-white"></i>&nbsp;Save
    </button>
    <button id="reloadButton" type="button" class="btn btn-warning" data-bind="activity: $root.reloadCommand.isExecuting, command: $root.reloadCommand">
        <i class="icon-refresh icon-white"></i>&nbsp;Reload
    </button>
    @* Moving this after all the buttons makes for a less jarring visual experience *@
    <span data-bind="visible: $root.isDirty" class="text-warning">You have unsaved changes.</span>
</p>

<br />

<div class="tabbable tabs-top">
    <ul id="formSections" class="nav nav-tabs">
        <li class="active" id="categoryTab"><a href="#categories" data-toggle="tab">Common Equipment</a></li>
        <li id="buoyTab"><a href="#buoys" data-toggle="tab">Buoys</a></li>
        <li id="vmsTab"><a href="#vms" data-toggle="tab">VMS</a></li>
        <li id="otherDeviceTab"><a href="#other" data-toggle="tab">Other Devices</a></li>
        <li id="commsTab"><a href="#comms" data-toggle="tab">Communication Services</a></li>
        <li id="infoTab"><a href="#info" data-toggle="tab">Information Services</a></li>
    </ul>
    <div class="tab-content">
        <div class="tab-pane active" id="categories">
            @{ Html.RenderPartial("_CategoryEditor"); }
        </div>
        <div class="tab-pane" id="buoys">
            @{ Html.RenderPartial("_BuoyEditor"); }
        </div>
        <div class="tab-pane" id="vms">
            @{ Html.RenderPartial("_VmsEditor"); }
        </div>
        <div class="tab-pane" id="other">
            @{ Html.RenderPartial("_OtherDeviceEditor"); }
        </div>
        <div class="tab-pane" id="comms">
            @{ Html.RenderPartial("_CommServiceEditor"); }
        </div>
        <div class="tab-pane" id="info">
            @{ Html.RenderPartial("_InfoServiceEditor"); }
        </div>
    </div>
</div>

@*
<pre data-bind="text: ko.toJSON($root, null, 2)"></pre>
*@

<ul id="tlyPageGuide" data-tourtitle="Detailed electronics entry instructions">
    <li class="tlypageguide_top" data-tourtarget="#saveButton">
        <div>
            The save button will only be active if there are unsaved changes.
        </div>
    </li>
    <li class="tlypageguide_top" data-tourtarget="#reloadButton">
        <div>
            Use the reload button to discard any unsaved changes.
        </div>
    </li>
    <li class="tlypageguide_bottom" data-tourtarget="#categoryTab">
        <div>
            This tab contains common devices for which make and model information is not important.
        </div>
    </li>
    <li class="tlypageguide_bottom" data-tourtarget="#buoyTab">
        <div>
            This tab contains devices with associated buoys.  
            Devices should be recorded here when there is (or should be) a count of associated buoys.
        </div>
    </li>
    <li class="tlypageguide_bottom" data-tourtarget="#vmsTab">
        <div>
            This tab contains vessel monitoring system (VMS) devices.  
        </div>
    </li>
    <li class="tlypageguide_bottom" data-tourtarget="#otherDeviceTab">
        <div>
            This tab contains devices that don't belong in the previous three tabs.
        </div>
    </li>
    <li class="tlypageguide_bottom" data-tourtarget="#commsTab">
        <div>
            This tab vessel phone numbers and/or an email address.
        </div>
    </li>
    <li class="tlypageguide_bottom" data-tourtarget="#infoTab">
        <div>
            This tab contains details about the information services used by this vessel.
        </div>
    </li>
    <li class="tlypageguide_top" data-tourtarget=".addItem:first">
        <div>
            Click here to add another row.
        </div>
    </li>
    <li class="tlypageguide_top" data-tourtarget="#addCommentButton">
        <div>
            Click here to add another comment row.
        </div>
    </li>
    <li class="tlypageguide_top" data-tourtarget=".removeItem:first">
        <div>
            Click here to remove this row.  The row won't be deleted until
            you click on the 'Save' button.  Until then, you can undo the delete
            by using the 'Reload' button.
        </div>
    </li>
    <li class="tlypageguide_top" data-tourtarget=".nextTabButton">
        <div>
            Click here to advance to the next section.  This is useful when you want to
            navigate to the next section without using the mouse.
        </div>
    </li>
</ul>

@section AdditionalScripts {
    @Scripts.Render("~/bundles/knockout")
    <script src="~/Scripts/App/errorlogger.js"></script>
    <script src="~/Scripts/App/datacontext.js"></script>
    <script src="~/Scripts/App/vm.electronics.js"></script>
    @{ var modelAsJson = Html.Raw(JsonConvert.SerializeObject(Model)); }
    <script>
        /*
         * Tab advance functionality from StackOverflow
         * http://stackoverflow.com/questions/9252127/how-to-change-twitter-bootstrap-tab-when-button-is-pressed
         */
        function nextTab() {
            $('#formSections li.active').next().find('a[data-toggle="tab"]').click();
        }

        $(document).ready(function () {
            $(document).on('keypress', 'enter', function () {
                // It would be cool to convert this to a tab keypress, but I'll be happy to
                // prevent unintended saves for now.
                return false;
            });

            // Add some click handlers
            $('.nextTabButton').on("click", function () {
                nextTab();
            });

            var viewModel = new tubs.Electronics(@modelAsJson);
            // To use validatedObservable, jam it into the apply bindings call
            // ko.applyBindings(ko.validatedObservable(viewModel));
            ko.applyBindings(viewModel);
            // This is the trick:  
            // applyBindings will coerce certain values from null to something else
            // If the dirty flag is cleared _after_ the bindings are set, then this is the
            // "normal" state for the viewmodel
            viewModel.clearDirtyFlag();

            // Add click handlers for managing child lists (e.g. Buoy, VMS, and 'Other Devices')
            // Other Device
            $('#addNewDevice').on("click", function () {
                viewModel.addOtherDevice();
            });

            $('#otherDeviceTable').on("click", ".removeItem", function () {
                viewModel.removeOtherDevice(ko.dataFor(this));
            });

            // VMS
            $('#addNewVms').on("click", function () {
                viewModel.addVms();
            });

            $('#vmsTable').on("click", ".removeItem", function () {
                viewModel.removeVms(ko.dataFor(this));
            });

            // Buoy
            $('#addNewBuoy').on("click", function () {
                viewModel.addBuoy();
            });

            $('#buoyTable').on("click", ".removeItem", function () {
                viewModel.removeBuoy(ko.dataFor(this));
            });

            // PageGuide initialization
            tl.pg.init();

            /* TODO: Extract this into a common script for the whole application */
            window.onbeforeunload = function (e) {
                if (viewModel.isDirty()) {
                    if (!e) e = window.event;
                    // IE only?
                    e.cancelBubble = true;
                    e.returnValue = "Leaving the page will discard unsaved changes.";
                    // Firefox?
                    if (e.stopPropagation) {
                        e.stopPropagation();
                        e.preventDefault();
                    }

                    return "Leaving the page will discard unsaved changes.";
                }
            };
        });
    </script>
}
