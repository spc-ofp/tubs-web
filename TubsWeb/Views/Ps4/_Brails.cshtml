@model TubsWeb.ViewModels.LengthFrequencyViewModel

<div class="row">
    <div class="span1">
        <label><strong>Full</strong></label>
        @Html.DisplayFor(m => m.FullBrailCount)
    </div>
    <div class="span1">
        <label><strong>7/8</strong></label>
        @Html.DisplayFor(m => m.SevenEighthsBrailCount)
    </div>
    <div class="span1">
        <label><strong>3/4</strong></label>
        @Html.DisplayFor(m => m.ThreeQuartersBrailCount)
    </div>
    <div class="span1">
        <label><strong>2/3</strong></label>
        @Html.DisplayFor(m => m.TwoThirdsBrailCount)
    </div>
    <div class="span1">
        <label><strong>1/2</strong></label>
        @Html.DisplayFor(m => m.OneHalfBrailCount)
    </div>
    <div class="span1">
        <label><strong>1/3</strong></label>
        @Html.DisplayFor(m => m.OneThirdBrailCount)
    </div>
    <div class="span1">
        <label><strong>1/4</strong></label>
        @Html.DisplayFor(m => m.OneQuarterBrailCount)
    </div>
    <div class="span1">
        <label><strong>1/8</strong></label>
        @Html.DisplayFor(m => m.OneEighthBrailCount)
    </div>
    <div class="span1">
        <label><strong>Total</strong></label>
        @Html.DisplayFor(m => m.TotalBrails)
    </div>
    <div class="span1">
        <label><strong>Sum</strong></label>
        @Html.DisplayFor(m => m.SumOfAllBrails, new { format = "F2" })
    </div>
</div>

@*
 * Slice the up-to-30 brails into 3 columns of 10 values.
 * This is the most compact form that will also respect tab order
 *@
@if (Model.Brails.Any())
{
    var columnSize = 10;
    var columnCount = 3;
    <hr />
    <p>
        Brail fullness and samples per brail.  Written as (fullness code) / (samples).
    </p>

    <div class="row">
    @foreach (var offset in Enumerable.Range(0, columnCount).Select(x => x * columnSize))
    { 
        <div class="span3">
            <ol class="dense">
            @foreach (var brail in Model.Brails.Skip(offset).Take(columnSize))
            {
                if (brail.Samples.HasValue || brail.Fullness.HasValue)
                { 
                <text>
                    <li><span>@if (brail.Number < 10) { <text>&nbsp;</text> }@brail.Number</span> @brail.Fullness / @brail.Samples</li>
                </text>
                }
            }
            </ol>
        </div>
    }
    </div>
}