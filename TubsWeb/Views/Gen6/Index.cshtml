@model Spc.Ofp.Tubs.DAL.Entities.PollutionEvent
@using Spc.Ofp.Tubs.DAL.Common
@using Spc.Ofp.Tubs.DAL.Entities

@helper SpeedAndDirection(int? speed, int? direction) {
    if (!speed.HasValue && !direction.HasValue) {
        <text>N/A</text> 
    } else {
        var sb = new System.Text.StringBuilder();
        sb.Append(speed.HasValue ? speed.Value.ToString() : "UNK");
        sb.Append(" kts @ ");
        sb.Append(direction.HasValue ? direction.Value.ToString() : "UNK");
        sb.Append("&deg;");        
        @Html.Raw(sb.ToString()) 
    }
}

@* For now, create this in the View. *@
@{
    IEnumerable<Tuple<string, string>> crumbs = new List<Tuple<string, string>>()
    {
        Tuple.Create(Url.RouteUrl("TripList"), "Trips"),
        Tuple.Create(Url.Action("Details", "Trip", new { tripId = ViewBag.TripId }), Model.Trip.SpcTripNumber ?? "This Trip"),
        Tuple.Create(Url.Action("List", "Gen6", new { tripId = ViewBag.TripId }), "GEN-6 Events"),
        Tuple.Create("#", String.Format("Page {0} of {1}", ViewBag.CurrentPage, ViewBag.MaxPages))
    };
}

@{ Html.RenderPartial("_BreadCrumbs", crumbs); }

<ul class="pager">
@{
    if (ViewBag.CurrentPage > 1) {
        <li>
            <a href='@Url.RouteUrl("Gen6Details", new { tripId = ViewBag.TripId, pageNumber = ViewBag.CurrentPage - 1 })'>Previous Page</a>
        </li>
    }

    if (ViewBag.MaxPages > ViewBag.CurrentPage)
    {
        <li>
            <a href='@Url.RouteUrl("Gen6Details", new { tripId = ViewBag.TripId, pageNumber = ViewBag.CurrentPage + 1 })'>Next Page</a>
        </li>
    }
}
</ul>

@if (null == Model)
{
<p>
    No such GEN-6 page for this trip.
</p>
}
else
{
    <fieldset>
        <legend>Incident Details</legend>
        @* TODO Add current (knots and direction), observer's vessel activity, ircs, vessel type, and relative location *@
        <div class="row">
            <div class="span4">@Html.LabelFor(m => m.IncidentDate)</div>
            <div class="span4">@Html.DisplayFor(m => m.IncidentDate)</div>
        </div>
        <div class="row">
            <div class="span4">@Html.Label("Position")</div>
            <div class="span4">@Model.Latitude / @Model.Longitude (@Model.EezId)</div>
        </div>
        <div class="row">
            <div class="span4">@Html.Label("Wind Conditions")</div>
            <div class="span4">@SpeedAndDirection(Model.WindSpeed, Model.WindDirection)</div>
        </div>
        <div class="row">
            <div class="span4">@Html.LabelFor(m => m.SeaCode)</div>
            <div class="span4">@Html.DisplayFor(m => m.SeaCode)</div>
        </div>
        <div class="row">
            <div class="span4">@Html.Label("Offending Vessel")</div>
            <div class="span4">@Html.DisplayFor(m => m.SeaCode)</div>
        </div>
        <div class="row">
            <div class="span4">@Html.Label("MARPOL Stickers/Posters on display?")</div>
            <div class="span4">@Html.DisplayFor(m => m.MarpolStickers)</div>
        </div>
        <div class="row">
            <div class="span4">@Html.Label("Was captain aware of MARPOL Regulations?")</div>
            <div class="span4">@Html.DisplayFor(m => m.CaptainAware)</div>
        </div>
        <div class="row">
            <div class="span4">@Html.Label("Was captain advised of MARPOL infringements?")</div>
            <div class="span4">@Html.DisplayFor(m => m.CaptainAdvised)</div>
        </div>
        <div class="row">
            <div class="span4">@Html.Label("Were photos taken?")</div>
            <div class="span4">@Html.DisplayFor(m => m.PhotosTaken)</div>
        </div>
        <div class="row">
            <div class="span4">@Html.Label("Photo Frames")</div>
            <div class="span4">@Html.DisplayFor(m => m.PhotoFrames)</div>
        </div>
        <div class="row">
            <div class="span4">@Html.LabelFor(m => m.Comments)</div>
        </div>
        <div class="row">
            <div class="span12">@Html.DisplayFor(m => m.Comments, new { @cols = 80, @rows = 5 })</div>
        </div>
    </fieldset>
    
    <hr />
    
    @*  Create two additional fieldsets, one for waste dumped overboard and another for oil spills/leaks *@
    var waste = from d in Model.Details where d.GetType() == typeof(WasteDetail) select d as WasteDetail;
    var spills = from d in Model.Details where d.GetType() == typeof(SpillDetail) select d as SpillDetail;

    if (waste.Count() > 0)
    {
    <fieldset>
        <legend>Waste Dumped Overboard</legend>
        <table class="table table-bordered table-condensed table-striped">
            <thead>
                <tr>
                    <th>Material</th>
                    <th>Type Description</th>
                    <th>Quantity Description</th>
                </tr>
            </thead>
            <tbody>
            @foreach (var item in waste)
            {
                <tr>
                    <td>@item.Material.GetDescription()</td>
                    <td>@item.Description</td>
                    <td>@item.Quantity</td>
                </tr>
            }
            </tbody>
        </table>
    </fieldset>
    }

    if (waste.Count() > 0 && spills.Count() > 0)
    {
        <hr />
    }

    if (spills.Count() > 0)
    {
    <fieldset>
        <legend>Oil Spillages and Leakages</legend>
        <table class="table table-bordered table-condensed table-striped">
            <thead>
                <tr>
                    <th>Source</th>
                    <th>Visual Appearance / Colour</th>
                    <th>Area and Quantity</th>
                </tr>
            </thead>
            <tbody>
            @foreach (var item in spills)
            {
                <tr>
                    <td>@item.Source.GetDescription()</td>
                    <td>@item.Description</td>
                    <td>@item.Quantity</td>
                </tr>
            }
            </tbody>
        </table>
    </fieldset>
    }
}