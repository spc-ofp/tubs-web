@model TubsWeb.ViewModels.WellContentViewModel
@using Newtonsoft.Json
@using System.Web.Optimization

@{
    ViewBag.Title = String.Format("{0}: Edit Well Content", Model.TripNumber);
}

@* For now, create this in the View. *@
@{
    IEnumerable<Tuple<string, string>> crumbs = new List<Tuple<string, string>>()
    {
        Tuple.Create(Url.RouteUrl("TripList"), "Trips"),
        Tuple.Create(Url.Action("Details", "Trip", new { tripId = Model.TripId }), Model.TripNumber ?? "This Trip"),
        Tuple.Create(Url.Action("Index", "WellContent", new { tripId = Model.TripId }), "Well Content"),
        Tuple.Create("#", "Edit")
    };
}

@{ Html.RenderPartial("_BreadCrumbs", crumbs); }

@* 
 * By keeping the buttons and text in the same paragraph container, there's no positional change/re-rendering of form
 * when the first 'dirtying' change occurs.
 *@
<p>
    <button id="saveButton" type="submit" class="btn btn-primary" data-bind="activity: $root.saveCommand.isExecuting, command: $root.saveCommand">
        <i class="icon-save icon-white"></i>&nbsp;Save
    </button>
    <button id="reloadButton" type="button" class="btn btn-warning" data-bind="activity: $root.reloadCommand.isExecuting, command: $root.reloadCommand">
        <i class="icon-refresh icon-white"></i>&nbsp;Reload
    </button>
    <span data-bind="visible: $root.isDirty" class="text-warning">You have unsaved changes.</span>
</p>
<hr />

    @* TODO: Move 'Delete' button to last column and use full text in button (e.g. SetHaul _LogEditor) *@
    @* Full text will also allow for better notification of attached set *@
    <table class="table table-condensed">
        <thead>
            <tr>                
                <th>Well Number</th>
                <th>Location</th>
                <th>Capacity (mT)</th>
                <th>Contents</th>
                <th>Comments</th>
                <th>&nbsp;</th>
            </tr>
        </thead>
        <tbody data-bind="foreach: $root.WellContentItems" class="ps2events">
            <tr data-bind="css: { warning: (isDirty() || Id() == 0) }">                
                <td><input data-bind="hasfocus: NeedsFocus, value: WellNumber, uniqueName: true" class="required input-mini" type="number" required="required"/></td>
                <td><select data-bind="options: $root.Locations, value: Location" class="input-medium"></select></td>
                <td><input data-bind="value: Capacity, uniqueName: true" class="input-small" type="number" step="any"/></td>
                <td><select data-bind="options: $root.Contents, value: Content" class="input-small"></select></td>
                <td><input data-bind="value: Comment, uniqueName: true" class="input-large" type="text" /></td>
                <td>
                    @* Delete button is taken out of the tab order to prevent accidents *@
                    <button 
                            type="button"
                            tabindex="3000"
                            class="removeItem btn btn-danger" 
                            rel="tooltip" 
                            title="Click to delete row">
                        <i class="icon-trash icon-white"></i></button>
                </td>
            </tr>
        </tbody>
    </table>
<button id="btnAddWellContent" type="button" class="btn btn-info" rel="tooltip" title="Click to add row"><i class="icon-plus-sign icon-white"></i> Add Well Content</button>

@*<pre data-bind="text: ko.toJSON($root, null, 2)"></pre>
*@


@section AdditionalScripts {
    @Scripts.Render("~/bundles/knockout")

    <!-- Ajax data layer -->
    <script src="~/Scripts/App/errorlogger.js"></script>
    <script src="~/Scripts/App/datacontext.js"></script>
    <script src="~/Scripts/App/vm.wellcontent.js"></script>
    @{ var modelAsJson = Html.Raw(JsonConvert.SerializeObject(Model)); }
    <script>
        $(function () {

            var viewModel = new tubs.WellContentViewModel(@modelAsJson);           
            ko.applyBindings(viewModel);
            viewModel.clearDirtyFlag();

            $("#btnAddWellContent").on("click", function () {
                viewModel.addWellContent();
            });

            $(".ps2events").on("click", ".removeItem", function () {
                viewModel.removeWellContent(ko.dataFor(this));
            });

            /* TODO: Extract this into a common script for the whole application */
            window.onbeforeunload = function(e) {
                if (viewModel.isDirty())
                {
                    if (!e) e = window.event;
                    // IE only?
                    e.cancelBubble = true;
                    e.returnValue = "Leaving the page will discard unsaved changes.";
                    // Firefox?
                    if (e.stopPropagation)
                    {
                        e.stopPropagation();
                        e.preventDefault();
                    }

                    return "Leaving the page will discard unsaved changes.";
                }
            };
        });
    </script>
}
