@model TubsWeb.Models.SeaDayViewModel

@* For now, create this in the View. *@
@{
    IEnumerable<Tuple<string, string>> crumbs = new List<Tuple<string, string>>()
    {
        Tuple.Create(Url.Action("Index", "Trip"), "Trips"),
        Tuple.Create(Url.Action("Details", "Trip", new { tripId = Model.TripId }), Model.TripNumber ?? "This Trip"),
        Tuple.Create(Url.Action("List", "SeaDay", new { tripId = Model.TripId }), "Sea Days"),
        Tuple.Create("#", String.Format("Day {0} of {1}", Model.DayNumber, Model.MaxDays))
    };
}

@{ Html.RenderPartial("_BreadCrumbs", crumbs); }

<ul class="pager">
    @if (Model.HasPrevious) {
        <li>
            <a href='@Url.RouteUrl(TubsWeb.RouteConfig.SeaDays, new { tripId = Model.TripId, dayNumber = Model.PreviousDay, action = "Index" })'>Previous Day</a>
        </li>
    }
    
    @if(Model.HasNext) {
        <li>
            <a href='@Url.RouteUrl(TubsWeb.RouteConfig.SeaDays, new { tripId = Model.TripId, dayNumber = Model.NextDay, action = "Index" })'>Next Day</a>
        </li>
    }
</ul>

<!-- Add Sea days and sets for PS trips -->
@if (Model.IsEmpty)
{
    <text>No PS-2 data for this day and trip.</text>
}
else
{
    <fieldset>
        <legend>Start of Day</legend>
        <div class="row">
            <div class="span3">
                <strong>Ship's Date:</strong> @Html.DisplayFor(m => Model.ShipsDate, new { format = "d" })
            </div>
            <div class="span3">
                <strong>Ship's Time:</strong> @Model.ShipsTime
            </div>
        </div>
        <div class="row">
            <div class="span3">
                <strong>UTC Date:</strong> @Html.DisplayFor(m => Model.UtcDate, new { format = "d" })
            </div>
            <div class="span3">
                <strong>UTC Time:</strong> @Model.UtcTime
            </div>
        </div>
    </fieldset>
    <br />
    <fieldset>
        <legend>Floating Object and School Sightings</legend>
        <div class="row">
            <div class="span4">Anchored objects <strong>NO</strong> school: @Html.DisplayFor(m => Model.AnchoredWithNoSchool)</div>
            <div class="span4">Anchored objects <strong>with</strong> school: @Html.DisplayFor(m => Model.AnchoredWithSchool)</div>
        </div>
        <div class="row">
            <div class="span4">Floating objects <strong>NO</strong> school: @Html.DisplayFor(m => Model.FreeFloatingWithNoSchool)</div>
            <div class="span4">Floating objects <strong>with</strong> school: @Html.DisplayFor(m => Model.FreeFloatingWithSchool)</div>
        </div>
        <div class="row">
            <div class="span4">Free schools: @Html.DisplayFor(m => Model.FreeSchool)</div>
        </div>
    </fieldset>
    <fieldset>
        <legend>GEN-3 Events</legend>
        <div class="row">
            <div class="span4">Observed event recorded on GEN-3? @Html.DisplayFor(m => Model.HasGen3Event)</div>
            <div class="span4">Diary Page: @(Model.DiaryPage ?? "N/A")</div>
        </div>
    </fieldset>
    <br />
    @* TODO:  It would be nice to fix the widths of the columns *@
    <table class="table table-bordered table-condensed table-striped">
      <thead>
          <tr>
            <th>Ship's Time</th>
            <th>Position</th>
            <th>EEZ</th>
            <th>Activity</th>
            <th>Wind Speed/Direction</th>
            <th>Sea</th>
            <th>Detection Method</th>
            <th>Association</th>
            <th>Comments</th>
          </tr>
      </thead>
      <tbody>
      @foreach (var entry in Model.Events)
      {
          @Html.DisplayFor(m => entry)
      }
      </tbody>
    </table>
    
    @*TODO:  Add color coded dots to the activity column that match the pins in the map?  Or just color code the rows for significant events?*@
    @*TODO:  Add in a hideable map for just this day.  Bonus points for overlaying observer, VMS, and logsheet data.*@
}
