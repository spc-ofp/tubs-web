@model TubsWeb.ViewModels.CrewViewModel
@using Newtonsoft.Json
@using System.Web.Optimization

@* For now, create this in the View. *@
@{
    IEnumerable<Tuple<string, string>> crumbs = new List<Tuple<string, string>>()
    {
        Tuple.Create(Url.RouteUrl("TripList"), "Trips"),
        Tuple.Create(Url.Action("Details", "Trip", new { tripId = Model.TripId }), Model.TripNumber),
        Tuple.Create(Url.Action("Index", "Crew", new { tripId = Model.TripId }), "Crew"),
        Tuple.Create("#", "Edit Crew")
    };
}

@{ Html.RenderPartial("_BreadCrumbs", crumbs); }
@* TODO:  Add a Knockout submit binding to the form? *@

@{ Html.RenderPartial("_CountryCodes"); }

<p>
    <button id="saveButton" type="submit" class="btn btn-primary" data-bind="activity: $root.saveCommand.isExecuting, command: $root.saveCommand">
        <i class="icon-save icon-white"></i>&nbsp;Save
    </button>
    <button id="reloadButton" type="button" class="btn btn-warning" data-bind="activity: $root.reloadCommand.isExecuting, command: $root.reloadCommand">
        <i class="icon-refresh icon-white"></i>&nbsp;Reload
    </button>
    <span data-bind="visible: $root.isDirty" class="text-warning">You have unsaved changes.</span>
</p>
<fieldset>
    <legend id="seniorCrew">Senior Crew</legend>
    <table class="table table-condensed">
        <thead>
            <tr>
                <th>Job</th>
                <th>Name</th>
                <th>Experience</th>
                <th>Nationality</th>
                <th>Comments</th>
            </tr>
        </thead>
        <tbody>
            @* MVC partial makes for less copy/paste noise, although it does mean more stuff needs to be in the author/debugger's head *@
            @Html.Partial("_SeniorCrew", Model.Captain, new ViewDataDictionary { { "bindingSource", "Captain" }, { "jobTitle", "Captain" } })
            @Html.Partial("_SeniorCrew", Model.Navigator, new ViewDataDictionary { { "bindingSource", "Navigator" }, { "jobTitle", "Navigator/Master" } })
            @Html.Partial("_SeniorCrew", Model.Mate, new ViewDataDictionary { { "bindingSource", "Mate" }, { "jobTitle", "Mate" } })
            @Html.Partial("_SeniorCrew", Model.ChiefEngineer, new ViewDataDictionary { { "bindingSource", "ChiefEngineer" }, { "jobTitle", "Chief Engineer" } })
            @Html.Partial("_SeniorCrew", Model.AssistantEngineer, new ViewDataDictionary { { "bindingSource", "AssistantEngineer" }, { "jobTitle", "Assistant Engineer" } })
            @Html.Partial("_SeniorCrew", Model.DeckBoss, new ViewDataDictionary { { "bindingSource", "DeckBoss" }, { "jobTitle", "Deck Boss" } })
            @Html.Partial("_SeniorCrew", Model.Cook, new ViewDataDictionary { { "bindingSource", "Cook" }, { "jobTitle", "Cook" } })
            @Html.Partial("_SeniorCrew", Model.HelicopterPilot, new ViewDataDictionary { { "bindingSource", "HelicopterPilot" }, { "jobTitle", "Helicopter Pilot" } })
            @Html.Partial("_SeniorCrew", Model.SkiffMan, new ViewDataDictionary { { "bindingSource", "SkiffMan" }, { "jobTitle", "Skiff Man" } })
            @Html.Partial("_SeniorCrew", Model.WinchMan, new ViewDataDictionary { { "bindingSource", "WinchMan" }, { "jobTitle", "Winch Man" } })
        </tbody>
    </table>
</fieldset>

<fieldset>
    <legend id="otherCrew">Other Crew</legend>
    <table class="table table-condensed deckhands">
        <thead>
            <tr>
                <th>Name</th>
                <th>Experience</th>
                <th>Nationality</th>
                <th>Comments</th>
                <th></th>
            </tr>
        </thead>
        <tbody data-bind="foreach: Hands">
            <tr data-bind="css: { warning: (isDirty() || 0 === Id) }">
                <td><input data-bind="hasfocus: NeedsFocus, value: Name, uniqueName: true" class="required" type="text" /></td>
                <td><input data-bind="value: Years, uniqueName: true" class="input-mini number" type="number" min="0"/></td>
                <td>
                    <input class="input-mini countryCode" 
                           list="countryCodes"
                           type="text" 
                           data-bind="value: Nationality, uniqueName: true"  /></td>
                <td><input data-bind="value: Comments, uniqueName: true" class="input-xxlarge" type="text" /></td>
                <td>
                    <button type="button"
                            class="removeItem btn btn-danger"
                            tabindex="5000" 
                            rel="tooltip" 
                            data-confirm="Delete this crewmember?"
                            title="Click to remove row">
                        <i class="icon-trash icon-white"></i>
                    </button>
                </td>
            </tr>
        </tbody>
    </table>
    <button id="btnAddHand" type="button" class="btn btn-info"><i class="icon-plus-sign icon-white"></i> Add Hand</button>
</fieldset>

<ul id="tlyPageGuide" data-tourtitle="Detailed crew entry instructions">
    <li class="tlypageguide_top" data-tourtarget="#saveButton">
        <div>
            The save button will only be active if there are unsaved changes.
        </div>
    </li>
    <li class="tlypageguide_top" data-tourtarget="#reloadButton">
        <div>
            Use the reload button to discard any unsaved changes.
        </div>
    </li>
    <li class="tlypageguide_left" data-tourtarget="#seniorCrew">
        <div>
            This space is provided for the entry of senior crew, such as the captain, deck boss, or helicopter
            pilot.  If a job title has been entered that doesn't appear below, use the 'Other Crew' section
            and use the provided comments field for the job title.

            Instructions are given for entering the captain's data, but the entry process is similar for all the
            senior crew.
        </div>
    </li>
    <li class="tlypageguide_top" data-tourtarget="#Captain_Name">
        <div>
            Enter the captain's full name here.
        </div>
    </li>
    <li class="tlypageguide_top" data-tourtarget="#Captain_Years">
        <div>
            Enter the captain's years of experience here.  Round to the nearest year.
        </div>
    </li>
    <li class="tlypageguide_top" data-tourtarget="#Captain_Nationality">
        <div>
            Enter the two character ISO code for the captain's nationality here.
        </div>
    </li>
    <li class="tlypageguide_top" data-tourtarget="#Captain_Comments">
        <div>
            Enter any comments about the captain here.  This usually includes the captain's
            license number(s).
        </div>
    </li>
    <li class="tlypageguide_left" data-tourtarget="#btnAddHand">
        <div>
            Click here to add additional deck hands.
        </div>
    </li>
    <li class="tlypageguide_right" data-tourtarget=".removeItem:first">
        <div>
            Click here to remove this deck hand.
        </div>
    </li>
</ul>

@*<pre data-bind="text: ko.toJSON($root, null, 2)"></pre>*@

@section AdditionalScripts {
    @Scripts.Render("~/bundles/knockout")
    <script src="~/Scripts/App/errorlogger.js"></script>
    <script src="~/Scripts/App/datacontext.js"></script>  
    <script src="~/Scripts/App/vm.crew.js"></script>
    @{ var modelAsJson = Html.Raw(JsonConvert.SerializeObject(Model)); }
    <script>          
        $(document).ready(function () {
            // TODO Collect up this and the window.onbeforeunload script into a single
            // external script and include where necessary
            $(document).on('keypress', 'enter', function () {
                // It would be cool to convert this to a tab keypress, but I'll be happy to
                // prevent unintended saves for now.
                return false;
            });

            var viewModel = new tubs.psCrewViewModel(@modelAsJson);            
            ko.applyBindings(viewModel);
            viewModel.clearDirtyFlag();

            $('.deckhands').on("click", ".removeItem", function() {
                viewModel.removeHand(ko.dataFor(this));
            });

            $('.deckhands').on("click", ".addItem", function() {
                viewModel.addHand();
            });

            $("#btnAddHand").on("click", function () {
                viewModel.addHand();
            });

            /* TODO: Extract this into a common script for the whole application */
            window.onbeforeunload = function(e) {
                if (viewModel.isDirty())
                {
                    if (!e) e = window.event;
                    // IE only?
                    e.cancelBubble = true;
                    e.returnValue = "Leaving the page will discard unsaved changes.";
                    // Firefox?
                    if (e.stopPropagation)
                    {
                        e.stopPropagation();
                        e.preventDefault();
                    }

                    return "Leaving the page will discard unsaved changes.";
                }
            };  
            
            // PageGuide initialization
            tl.pg.init(); 
        });       
    </script>
}
