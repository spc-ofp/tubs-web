@model TubsWeb.Models.CrewViewModel
@using TubsWeb.Models
@using Newtonsoft.Json

@* For now, create this in the View. *@
@{
    IEnumerable<Tuple<string, string>> crumbs = new List<Tuple<string, string>>()
    {
        Tuple.Create(Url.Action("Index", "Trip"), "Trips"),
        Tuple.Create(Url.Action("Details", "Trip", new { tripId = ViewBag.TripId }), Model.TripNumber),
        Tuple.Create(Url.Action("Index", "Crew", new { tripId = ViewBag.TripId }), "Crew"),
        Tuple.Create("#", "Edit Crew")
    };
}

@{ Html.RenderPartial("_BreadCrumbs", crumbs); }
<form id="crewForm">
<p>
    <button type="submit" class="btn btn-primary" data-bind="activity: $root.saveCommand.isExecuting, command: $root.saveCommand">Save</button>
    <button type="button" class="btn btn-warning" data-bind="activity: $root.reloadCommand.isExecuting, command: $root.reloadCommand">
        <i class="icon-refresh icon-white"></i>&nbsp;Reload
    </button>
    <span data-bind="visible: $root.isDirty" class="text-warning">You have unsaved changes.</span>
</p>
<fieldset>
    <legend>Senior Crew</legend>
    @* Knockout version *@
    @* TODO: If there's a pending edit, change the row class to "warning" *@
    <em>Use Ctrl-Z to undo any unsaved edits.</em>
    <table class="table table-condensed">
        <thead>
            <tr>
                <th>Job</th>
                <th>Name</th>
                <th>Experience</th>
                <th>Nationality</th>
                <th>Comments</th>
            </tr>
        </thead>
        <tbody>
            @* MVC partial makes for less copy/paste noise, although it does mean more stuff needs to be in the author/debugger's head *@
            @Html.Partial("_SeniorCrew", Model.Captain, new ViewDataDictionary { { "bindingSource", "$root.Captain()" }, { "jobTitle", "Captain" } })
            @Html.Partial("_SeniorCrew", Model.Navigator, new ViewDataDictionary { { "bindingSource", "$root.Navigator()" }, { "jobTitle", "Navigator/Master" } })
            @Html.Partial("_SeniorCrew", Model.Mate, new ViewDataDictionary { { "bindingSource", "$root.Mate()" }, { "jobTitle", "Mate" } })
            @Html.Partial("_SeniorCrew", Model.ChiefEngineer, new ViewDataDictionary { { "bindingSource", "$root.ChiefEngineer()" }, { "jobTitle", "Chief Engineer" } })
            @Html.Partial("_SeniorCrew", Model.AssistantEngineer, new ViewDataDictionary { { "bindingSource", "$root.AssistantEngineer()" }, { "jobTitle", "Assistant Engineer" } })
            @Html.Partial("_SeniorCrew", Model.DeckBoss, new ViewDataDictionary { { "bindingSource", "$root.DeckBoss()" }, { "jobTitle", "Deck Boss" } })
            @Html.Partial("_SeniorCrew", Model.Cook, new ViewDataDictionary { { "bindingSource", "$root.Cook()" }, { "jobTitle", "Cook" } })
            @Html.Partial("_SeniorCrew", Model.HelicopterPilot, new ViewDataDictionary { { "bindingSource", "$root.HelicopterPilot()" }, { "jobTitle", "Helicopter Pilot" } })
            @Html.Partial("_SeniorCrew", Model.SkiffMan, new ViewDataDictionary { { "bindingSource", "$root.SkiffMan()" }, { "jobTitle", "Skiff Man" } })
            @Html.Partial("_SeniorCrew", Model.WinchMan, new ViewDataDictionary { { "bindingSource", "$root.WinchMan()" }, { "jobTitle", "Winch Man" } })
        </tbody>
    </table>
</fieldset>
<button id="btnAddWhenEmpty" type="button" class="btn btn-info" data-bind="visible: $root.Hands().length == 0">Add Hand</button>
<fieldset>
    <legend>Other Crew</legend>
    <table class="table table-condensed">
        <thead>
            <tr>
                <th></th>
                <th>Name</th>
                <th>Experience</th>
                <th>Nationality</th>
                <th>Comments</th>
                <th></th>
            </tr>
        </thead>
        <tbody data-bind="foreach: $root.Hands">
            <tr data-bind="css: { warning: ($data.isDirty() || 0 === $data.Id) }">
                <td>
                    <button class="removeItem btn btn-mini btn-danger" rel="tooltip" title="Click to remove row"><i class="icon-remove icon-white"></i></button>
                </td>
                <td><input data-bind="hasfocus: NeedsFocus, value: Name, uniqueName: true" class="required" type="text" /></td>
                <td><input data-bind="value: Years, uniqueName: true" class="input-mini number" type="number" /></td>
                <td><input data-bind="value: Nationality, uniqueName: true" class="input-mini" type="text" /></td>
                <td><input data-bind="value: Comments, uniqueName: true" class="input-xxlarge" type="text" /></td>
                <td>
                    <button class="addItem btn btn-mini btn-info" rel="tooltip" title="Click to add row"><i class="icon-plus icon-white"></i></button>
                </td>
            </tr>
        </tbody>
    </table>
</fieldset>
<p>
    <button type="submit" class="btn btn-primary" data-bind="activity: $root.saveCommand.isExecuting, command: $root.saveCommand">Save</button>
</p>
</form>

@*<pre data-bind="text: ko.toJSON($root, null, 2)"></pre>*@


@section AdditionalScripts {   
    <script src="~/Scripts/App/vm.crew.js"></script>
 
    @{ var modelAsJson = Html.Raw(JsonConvert.SerializeObject(Model)); }
    @{ var endpointUrl = Request.Url.AbsoluteUri; }
    <script>
        @* TODO:  Probably want to pull all the amplify requests into a single script and use params... *@
        amplify.request.define("getCrew", "ajax", {
            url: '@endpointUrl',
            dataType: "json",
            type: "GET"
        });

        amplify.request.define("saveCrew", "ajax", {
            url: '@endpointUrl',
            dataType: "json",
            contentType: "application/json",
            type: "POST"
        });
           
        $(document).ready(function () {
            var viewModel = new tubs.psCrewViewModel(@modelAsJson);
            viewModel.clearDirtyFlag();
            ko.applyBindings(viewModel);

            $(".addItem").on("click", function () {
                viewModel.addHand();
            });
            $(".removeItem").on("click", function () {
                viewModel.removeHand(ko.dataFor(this));
            });
            $("#btnAddWhenEmpty").on("click", function () {
                viewModel.addHand();
            });

            /* TODO: Extract this into a common script for the whole application */
            window.onbeforeunload = function(e) {
                if (viewModel.isDirty())
                {
                    if (!e) e = window.event;
                    // IE only?
                    e.cancelBubble = true;
                    e.returnValue = "Leaving the page will discard unsaved changes.";
                    // Firefox?
                    if (e.stopPropagation)
                    {
                        e.stopPropagation();
                        e.preventDefault();
                    }

                    return "Leaving the page will discard unsaved changes.";
                }
            };   
        });       
    </script>
}
