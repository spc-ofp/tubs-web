@model TubsWeb.Models.CrewViewModel
@using TubsWeb.Models

@* For now, create this in the View. *@
@{
    IEnumerable<Tuple<string, string>> crumbs = new List<Tuple<string, string>>()
    {
        Tuple.Create(Url.Action("Index", "Trip"), "Trips"),
        Tuple.Create(Url.Action("Details", "Trip", new { tripId = ViewBag.TripId }), Model.TripNumber),
        Tuple.Create(Url.Action("Index", "Crew", new { tripId = ViewBag.TripId }), "Crew"),
        Tuple.Create("#", "Edit Crew")
    };
}

@{ Html.RenderPartial("_BreadCrumbs", crumbs); }
<form id="crewForm">
<fieldset>
    <legend>Senior Crew</legend>
    @* Knockout version *@
    @* TODO: If there's a pending edit, change the row class to "warning" *@
    <em>Use Ctrl-Z to undo any unsaved edits.</em>
    <table class="table table-condensed">
        <thead>
            <tr>
                <th>Job</th>
                <th>Name</th>
                <th>Experience</th>
                <th>Nationality</th>
                <th>Comments</th>
            </tr>
        </thead>
        <tbody>
            @* MVC partial makes for less copy/paste noise, although it does mean more stuff needs to be in the author/debugger's head *@
            @Html.Partial("_SeniorCrew", Model.Captain, new ViewDataDictionary { { "bindingSource", "$root.Captain()" }, { "jobTitle", "Captain" } })
            @Html.Partial("_SeniorCrew", Model.Navigator, new ViewDataDictionary { { "bindingSource", "$root.Navigator()" }, { "jobTitle", "Navigator/Master" } })
            @Html.Partial("_SeniorCrew", Model.Mate, new ViewDataDictionary { { "bindingSource", "$root.Mate()" }, { "jobTitle", "Mate" } })
            @Html.Partial("_SeniorCrew", Model.ChiefEngineer, new ViewDataDictionary { { "bindingSource", "$root.ChiefEngineer()" }, { "jobTitle", "Chief Engineer" } })
            @Html.Partial("_SeniorCrew", Model.AssistantEngineer, new ViewDataDictionary { { "bindingSource", "$root.AssistantEngineer()" }, { "jobTitle", "Assistant Engineer" } })
            @Html.Partial("_SeniorCrew", Model.DeckBoss, new ViewDataDictionary { { "bindingSource", "$root.DeckBoss()" }, { "jobTitle", "Deck Boss" } })
            @Html.Partial("_SeniorCrew", Model.Cook, new ViewDataDictionary { { "bindingSource", "$root.Cook()" }, { "jobTitle", "Cook" } })
            @Html.Partial("_SeniorCrew", Model.HelicopterPilot, new ViewDataDictionary { { "bindingSource", "$root.HelicopterPilot()" }, { "jobTitle", "Helicopter Pilot" } })
            @Html.Partial("_SeniorCrew", Model.SkiffMan, new ViewDataDictionary { { "bindingSource", "$root.SkiffMan()" }, { "jobTitle", "Skiff Man" } })
            @Html.Partial("_SeniorCrew", Model.WinchMan, new ViewDataDictionary { { "bindingSource", "$root.WinchMan()" }, { "jobTitle", "Winch Man" } })
        </tbody>
    </table>
</fieldset>
<fieldset>
    <legend>Other Crew</legend>
    <table class="table table-condensed">
        <thead>
            <tr>
                <th></th>
                <th>Name</th>
                <th>Experience</th>
                <th>Nationality</th>
                <th>Comments</th>
                <th></th>
            </tr>
        </thead>
        <tbody data-bind="foreach: $root.Hands">
            <tr>
                @*
                <td>
                    <a href="#" data-bind="click: $root.removeHand" rel="tooltip" title="Click to remove row">
                        <i class="icon-remove"></i>
                    </a>
                </td>
                *@
                <td>
                    <button class="removeItem btn btn-mini btn-danger" rel="tooltip" title="Click to remove row"><i class="icon-remove icon-white"></i></button>
                </td>
                <td><input data-bind="hasfocus: NeedsFocus, value: Name, uniqueName: true" class="required" type="text" /></td>
                <td><input data-bind="value: Years, uniqueName: true" class="input-mini number" type="number" /></td>
                <td><input data-bind="value: Nationality, uniqueName: true" class="input-mini" type="text" /></td>
                <td><input data-bind="value: Comments, uniqueName: true" class="input-xxlarge" type="text" /></td>
                @*
                <td>
                    <a href="#" data-bind="click: $root.addHand" rel="tooltip" title="Click to add row">
                        <i class="icon-plus"></i>
                    </a>
                </td>
                *@
                <td>
                    <button class="addItem btn btn-mini btn-info" rel="tooltip" title="Click to add row"><i class="icon-plus icon-white"></i></button>
                </td>
            </tr>
        </tbody>
    </table>
</fieldset>
<p>
    Pending changes? <b data-bind="text: tracker().somethingHasChanged() ? 'YES' : 'NO'"></b>
</p>
<p>
    <button type="submit" class="btn btn-primary" data-bind="click: save">Save</button>
    @* TODO: IE is quirky with knockout when reloading, so we'll need a 'Reload' button *@
</p>
</form>


@section AdditionalScripts {   
    <script src="~/Scripts/App/crew.js"></script>

    <!-- Knockout work --> 
    @{ var serviceUrl = Url.RouteUrl(TubsWeb.RouteConfig.Crew, new { tripId = ViewBag.TripId }); }   
    @{ var modelAsJson = Html.Raw(Json.Encode(Model)); }
    <script type="text/javascript">
        // TODO Move viewModel stuff elsewhere, as we need to be able to add
        // some methods to it (add deck hand, save, reload, etc.
        /*
        getCrew = function () {
            $.ajax({
                url: '@serviceUrl',
                dataType: "json",
                success: function (result) {
                    var viewModel = ko.mapping.fromJS(result);
                    ko.applyBindings(viewModel);
                },
                error: function (xhr, status, error) {
                    $.meow({
                        title: 'Error loading crew',
                        message: error,
                        icon: "~/Content/images/nyan-cat.gif"
                    });
                }
            });
        }
        */

        // http://jsfiddle.net/b3ky5/
        function changeTracker(objectToTrack, hashFunction) {    
            hashFunction = hashFunction || ko.toJSON;
            var lastCleanState = ko.observable(hashFunction(objectToTrack));
    
            var result = {
                somethingHasChanged : ko.dependentObservable(function() {
                    return hashFunction(objectToTrack) != lastCleanState()
                }),
                markCurrentStateAsClean : function() {
                    lastCleanState(hashFunction(objectToTrack));   
                }
            };
    
            return function() { return result }
        }
        
        $(document).ready(function () {
            //getCrew();
            var content = @modelAsJson;
            var vm = new tubsCrew.PSCrewViewModel(content);
            vm.tracker = new changeTracker(vm);
            ko.applyBindings(vm);
            $(".crewForm").on("click", ".removeItem", function() {
                // TODO Store off Id for this event for later deletion...
                vm.removeHand(ko.dataFor(this));
            });
            $(".crewForm").on("click", ".addItem", function() {
                vm.addHand();
            });
            // http://blog.stevensanderson.com/2010/07/12/editing-a-variable-length-list-knockout-style/
            $("#crewForm").validate({ submitHandler: function() { 
                    vm.save() 
                } 
            });
        });       
    </script>

    <script type="text/javascript">
        function onSaveSuccess(data, status, xhr) {
            $.meow({
                message: 'Crewmember saved',
                icon: '@Url.Content("~/Content/images/nyan-cat.gif")'
            });
        }

        function onSaveFail(xhr, status, error) {
            $.meow({
                title: 'Failed to save crewmember',
                message: error,
                icon: '@Url.Content("~/Content/images/nyan-cat.gif")'
            });
        }

        function onAddFail(xhr, status, error) {
            $.meow({
                title: 'Failed to add crewmember',
                message: error,
                icon: '@Url.Content("~/Content/images/nyan-cat.gif")'
            });
        }

        function onAddSuccess(data, status, xhr) {
            /* Better to clear the text boxes only...*/
            clearFormEx('#addHandForm');
            $('#hand_Name').focus();
            $.meow({
                message: 'Crewmember added',
                icon: '@Url.Content("~/Content/images/nyan-cat.gif")'
            });
        }
    </script>
}
