@model TubsWeb.ViewModels.CrewViewModel
@using Newtonsoft.Json

@* For now, create this in the View. *@
@{
    IEnumerable<Tuple<string, string>> crumbs = new List<Tuple<string, string>>()
    {
        Tuple.Create(Url.RouteUrl("TripList"), "Trips"),
        Tuple.Create(Url.Action("Details", "Trip", new { tripId = Model.TripId }), Model.TripNumber),
        Tuple.Create(Url.Action("Index", "Crew", new { tripId = Model.TripId }), "Crew"),
        Tuple.Create("#", "Edit Crew")
    };
}

<!-- Experiment with data-confirm and unobtrusive javascript -->
@*
<button type="button" class="btn btn-info" data-confirm="Yo Dawg">Click me</button>
*@

@{ Html.RenderPartial("_BreadCrumbs", crumbs); }
@* TODO:  Add a Knockout submit binding to the form? *@
<form id="crewForm">
<p>
    <button id="saveButton" type="submit" class="btn btn-primary" data-bind="activity: $root.saveCommand.isExecuting, command: $root.saveCommand">Save</button>
    <button id="reloadButton" type="button" class="btn btn-warning" data-bind="activity: $root.reloadCommand.isExecuting, command: $root.reloadCommand">
        <i class="icon-refresh icon-white"></i>&nbsp;Reload
    </button>
    <span data-bind="visible: $root.isDirty" class="text-warning">You have unsaved changes.</span>
</p>
<fieldset>
    <legend id="seniorCrew">Senior Crew</legend>
    @* Knockout version *@
    @* TODO: If there's a pending edit, change the row class to "warning" *@
    <table class="table table-condensed">
        <thead>
            <tr>
                <th>Job</th>
                <th>Name</th>
                <th>Experience</th>
                <th>Nationality</th>
                <th>Comments</th>
            </tr>
        </thead>
        <tbody>
            @* MVC partial makes for less copy/paste noise, although it does mean more stuff needs to be in the author/debugger's head *@
            @Html.Partial("_SeniorCrew", Model.Captain, new ViewDataDictionary { { "bindingSource", "Captain" }, { "jobTitle", "Captain" } })
            @Html.Partial("_SeniorCrew", Model.Navigator, new ViewDataDictionary { { "bindingSource", "Navigator" }, { "jobTitle", "Navigator/Master" } })
            @Html.Partial("_SeniorCrew", Model.Mate, new ViewDataDictionary { { "bindingSource", "Mate" }, { "jobTitle", "Mate" } })
            @Html.Partial("_SeniorCrew", Model.ChiefEngineer, new ViewDataDictionary { { "bindingSource", "ChiefEngineer" }, { "jobTitle", "Chief Engineer" } })
            @Html.Partial("_SeniorCrew", Model.AssistantEngineer, new ViewDataDictionary { { "bindingSource", "AssistantEngineer" }, { "jobTitle", "Assistant Engineer" } })
            @Html.Partial("_SeniorCrew", Model.DeckBoss, new ViewDataDictionary { { "bindingSource", "DeckBoss" }, { "jobTitle", "Deck Boss" } })
            @Html.Partial("_SeniorCrew", Model.Cook, new ViewDataDictionary { { "bindingSource", "Cook" }, { "jobTitle", "Cook" } })
            @Html.Partial("_SeniorCrew", Model.HelicopterPilot, new ViewDataDictionary { { "bindingSource", "HelicopterPilot" }, { "jobTitle", "Helicopter Pilot" } })
            @Html.Partial("_SeniorCrew", Model.SkiffMan, new ViewDataDictionary { { "bindingSource", "SkiffMan" }, { "jobTitle", "Skiff Man" } })
            @Html.Partial("_SeniorCrew", Model.WinchMan, new ViewDataDictionary { { "bindingSource", "WinchMan" }, { "jobTitle", "Winch Man" } })
        </tbody>
    </table>
</fieldset>
<button id="btnAddWhenEmpty" type="button" class="btn btn-info" data-bind="visible: $root.Hands().length == 0">Add Hand</button>
<fieldset>
    <legend id="otherCrew">Other Crew</legend>
    <table class="table table-condensed deckhands">
        <thead>
            <tr>
                <th></th>
                <th>Name</th>
                <th>Experience</th>
                <th>Nationality</th>
                <th>Comments</th>
                <th></th>
            </tr>
        </thead>
        <tbody data-bind="foreach: Hands">
            <tr data-bind="css: { warning: (isDirty() || 0 === Id) }">
                <td>
                    <button type="button"
                            class="removeItem btn btn-mini btn-danger" 
                            rel="tooltip" 
                            data-confirm="Delete this crewmember?"
                            title="Click to remove row">
                        <i class="icon-remove icon-white"></i>
                    </button>
                </td>
                <td><input data-bind="hasfocus: NeedsFocus, value: Name, uniqueName: true" class="required" type="text" /></td>
                <td><input data-bind="value: Years, uniqueName: true" class="input-mini number" type="number" /></td>
                <td><input data-bind="value: Nationality, uniqueName: true" class="input-mini" type="text" /></td>
                <td><input data-bind="value: Comments, uniqueName: true" class="input-xxlarge" type="text" /></td>
                <td>
                    <button type="button" 
                            class="addItem btn btn-mini btn-info" 
                            rel="tooltip" 
                            title="Click to add row">
                        <i class="icon-plus icon-white"></i>
                    </button>
                </td>
            </tr>
        </tbody>
    </table>
</fieldset>
<p>
    <button type="submit" class="btn btn-primary" data-bind="activity: $root.saveCommand.isExecuting, command: $root.saveCommand">Save</button>
</p>
</form>

<ul id="tlyPageGuide" data-tourtitle="Detailed crew entry instructions">
    <li class="tlypageguide_top" data-tourtarget="#saveButton">
        <div>
            The save button will only be active if there are unsaved changes.
        </div>
    </li>
    <li class="tlypageguide_top" data-tourtarget="#reloadButton">
        <div>
            Use the reload button to discard any unsaved changes.
        </div>
    </li>
    <li class="tlypageguide_left" data-tourtarget="#seniorCrew">
        <div>
            This space is provided for the entry of senior crew, such as the captain, deck boss, or helicopter
            pilot.  If a job title has been entered that doesn't appear below, use the 'Other Crew' section
            and use the provided comments field for the job title.

            Instructions are given for entering the captain's data, but the entry process is similar for all the
            senior crew.
        </div>
    </li>
    <li class="tlypageguide_top" data-tourtarget="#Captain_Name">
        <div>
            Enter the captain's full name here.
        </div>
    </li>
    <li class="tlypageguide_top" data-tourtarget="#Captain_Years">
        <div>
            Enter the captain's years of experience here.  Round to the nearest year.
        </div>
    </li>
    <li class="tlypageguide_top" data-tourtarget="#Captain_Nationality">
        <div>
            Enter the two character ISO code for the captain's nationality here.
        </div>
    </li>
    <li class="tlypageguide_top" data-tourtarget="#Captain_Comments">
        <div>
            Enter any comments about the captain here.  This usually includes the captain's
            license number(s).
        </div>
    </li>
    <li class="tlypageguide_left" data-tourtarget="#otherCrew">
        <div>
            This space is provided for the entry of fishing hands.  
            As with the senior crew, use the two character ISO code for nationality.
        </div>
    </li>
</ul>

@*
<!-- Twitter Bootstrap modal dialog. -->
<div id="modalTemplate" class="modal hide fade">
    <div class="modal-header">
        <h3>Confirm</h3>
    </div>
    <div id="modalBody" class="modal-body">    
    </div>
    <div class="modal-footer">
        <a id="modal-yes" href="#" class="btn">Close</a>
        <a id="modal-no" href="#" class="btn btn-primary">Save changes</a>
    </div>
</div>
*@

@*<pre data-bind="text: ko.toJSON($root, null, 2)"></pre>*@


@section AdditionalScripts {
    <script src="~/Scripts/App/errorlogger.js"></script>
    <script src="~/Scripts/App/datacontext.js"></script>  
    <script src="~/Scripts/App/vm.crew.js"></script>
    <!-- ClickHandler function for opening/closing Twitter modal dialog. -->
    @*
    <script>
        // From here
        // http://stackoverflow.com/questions/8105556/how-do-i-explicitly-execute-default-action-from-jquery-event/8135983#8135983
        var confirmClickHandler = function (event) {
            if ($(event.currentTarget).data('isConfirming')) return;
            var message = event.currentTarget.attributes['data-confirm'].value;
            event.preventDefault();
            $('#modalBody').html(message);
            $('#modal-yes').on("click", function () {
                $('#modalTemplate').modal('hide');
                $(event.currentTarget).data('isConfirming', true);
                event.currentTarget.click();
                $(event.currentTarget).data('isConfirming', null);
            });
            $('#modal-no').on("click", function () {
                $('#modalTemplate').modal('hide');
            });
            $('#modalTemplate').modal('show');
        }; 
    </script>
    *@
 
    @{ var modelAsJson = Html.Raw(JsonConvert.SerializeObject(Model)); }
    <script>          
        $(document).ready(function () {
            //Doesn't work with Knockout.  Will need some work, but that can come later...
            //$("body").delegate("[data-confirm]", "click", confirmClickHandler);
            var viewModel = new tubs.psCrewViewModel(@modelAsJson);
            viewModel.clearDirtyFlag();
            ko.applyBindings(viewModel);

            $('.deckhands').on("click", ".removeItem", function() {
                viewModel.removeHand(ko.dataFor(this));
            });

            $('.deckhands').on("click", ".addItem", function() {
                viewModel.addHand();
            });

            $("#btnAddWhenEmpty").on("click", function () {
                viewModel.addHand();
            });

            /* TODO: Extract this into a common script for the whole application */
            window.onbeforeunload = function(e) {
                if (viewModel.isDirty())
                {
                    if (!e) e = window.event;
                    // IE only?
                    e.cancelBubble = true;
                    e.returnValue = "Leaving the page will discard unsaved changes.";
                    // Firefox?
                    if (e.stopPropagation)
                    {
                        e.stopPropagation();
                        e.preventDefault();
                    }

                    return "Leaving the page will discard unsaved changes.";
                }
            };  
            
            // PageGuide initialization
            tl.pg.init(); 
        });       
    </script>
}
