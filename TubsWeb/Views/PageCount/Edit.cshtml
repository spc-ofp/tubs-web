@model TubsWeb.ViewModels.PageCountViewModel
@using Newtonsoft.Json
@using System.Web.Optimization

@* For now, create this in the View. *@
@{
    IEnumerable<Tuple<string, string>> crumbs = new List<Tuple<string, string>>()
    {
        Tuple.Create(Url.RouteUrl("TripList"), "Trips"),
        Tuple.Create(Url.Action("Details", "Trip", new { tripId = Model.TripId }), Model.TripNumber ?? "This Trip"),
        Tuple.Create(Url.Action("Index", "PageCount", new { tripId = Model.TripId}), "Page Counts"),
        Tuple.Create("#", "Edit Page Counts")
    };
}

@{ Html.RenderPartial("_BreadCrumbs", crumbs); }
<p>
    <button id="saveButton" type="submit" class="btn btn-primary" data-bind="activity: $root.saveCommand.isExecuting, command: $root.saveCommand">
        <i class="icon-save icon-white"></i>&nbsp;Save
    </button>
    <button id="reloadButton" type="button" class="btn btn-warning" data-bind="activity: $root.reloadCommand.isExecuting, command: $root.reloadCommand">
        <i class="icon-refresh icon-white"></i>&nbsp;Reload
    </button>
    <span data-bind="visible: $root.isDirty" class="text-warning">You have unsaved changes.</span>
</p>

@* TODO: Needs a focus binding *@
<ul class="unstyled page-count-entries" data-bind="foreach: $root.PageCounts">
    <li>
        <div class="form-horizontal compact-row">
            <select class="input-small" data-bind="options: $root.FormKeys, value: $data.Key"></select>
            <input type="number" min="0" data-bind="value: $data.Value" class="input-mini" />
            <button type="button"
                    tabindex="3000"
                    class="removeItem btn btn-danger" 
                    rel="tooltip" 
                    title="Click to remove row">
                <i class="icon-trash icon-white"></i>
            </button>
        </div>
    </li>
</ul>
<p>
    <button id="btnAdd" type="button" class="btn btn-info"><i class="icon-plus-sign icon-white"></i>&nbsp;Add Page Count</button>
</p>

@*
<pre data-bind="text: ko.toJSON($root, null, 2)"></pre>
*@


@section AdditionalScripts {
    @Scripts.Render("~/bundles/knockout")
    <!-- Ajax data layer -->
    <script src="~/Scripts/App/errorlogger.js"></script>
    <script src="~/Scripts/App/datacontext.js"></script>
    <script src="~/Scripts/App/vm.pagecounts.js"></script>

    @{ var modelAsJson = Html.Raw(JsonConvert.SerializeObject(Model)); }

    <script>
        $(document).ready(function () {
            $(document).on('keypress', 'enter', function () {
                // It would be cool to convert this to a tab keypress, but I'll be happy to
                // prevent unintended saves for now.
                return false;
            });

            var viewModel = new tubs.PageCountViewModel(@modelAsJson);            
            ko.applyBindings(viewModel);
            viewModel.clearDirtyFlag();

            $(".page-count-entries").on("click", ".removeItem", function() {
                viewModel.removePageCount(ko.dataFor(this));
            });
            $("#btnAdd").on("click", function () {
                viewModel.addPageCount();
            });

            // PageGuide initialization
            tl.pg.init();

            /* TODO: Extract this into a common script for the whole application */
            window.onbeforeunload = function(e) {
                if (viewModel.isDirty())
                {
                    if (!e) e = window.event;
                    // IE only?
                    e.cancelBubble = true;
                    e.returnValue = "Leaving the page will discard unsaved changes.";
                    // Firefox?
                    if (e.stopPropagation)
                    {
                        e.stopPropagation();
                        e.preventDefault();
                    }

                    return "Leaving the page will discard unsaved changes.";
                }
            };  
        });
    </script>
    
}
