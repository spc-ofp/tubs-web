@model IEnumerable<Spc.Ofp.Tubs.DAL.Entities.Trip>

<h3>@ViewBag.Title</h3>

@{ AjaxOptions searchOptions = new AjaxOptions { HttpMethod = "Post", UpdateTargetId = "tripTable", OnSuccess = "onSearchSuccess", OnFailure = "onSearchFail" }; }
@using(Ajax.BeginForm("Search", null, searchOptions, new { @class = "well form-inline" }))
{
    @Html.Label("staffCode", "Observer:")
    @Html.TextBox("staffCode", String.Empty, new { @class = "input-small", placeholder = "Staff Code" })
    @Html.Label("vessel", "Vessel:")
    @Html.TextBox("vessel", String.Empty, new { placeholder = "Vessel Name" })
    @Html.Label("program", "Program Code:")
    @Html.DropDownList("program", new SelectList(Enum.GetValues(typeof(Spc.Ofp.Tubs.DAL.Common.ObserverProgram))), "Choose", new { @class = "span2" })
    <button type="submit" class="btn" onclick="$('#progressBar').show();">Search</button>
    var buttonLink = @Url.RouteUrl("TripList");
    /* We're going to write HTML like it's 1999! */
    <button id="btnClear" class="btn" style="display:none;" onclick="parent.location='@buttonLink'; return false;">Clear</button>
}

<div id="progressBar" style="display:none;" class="span2 offset4">
    <img src="@Url.Content("~/Content/images/ajax-loader.gif")" alt="Loading..." />
</div>

@{ Html.RenderPartial("_Trips", Model); }

@{
    // Bootstrap will disable a link if the container has the class 'disabled'.
    string classForPrevious = ViewBag.HasPrevious ? String.Empty : "disabled";
    string classForNext = ViewBag.HasNext ? String.Empty : "disabled";
    string actionName = ViewBag.ActionName ?? "Index";
}

@* TODO In the future, change this to 10 or 11 pages (fewer only if there are fewer than 10 pages) *@
<div id="pager" class="pagination">
    <ul>
        <li class="@classForPrevious"><a href='@Url.Action(actionName, new { page = (ViewBag.CurrentPage - 1) })'>&larr;</a></li>
        @{
            int minPage = Math.Max(0, (ViewBag.CurrentPage ?? 0) - 5);
            int maxPage = Math.Min((ViewBag.CurrentPage ?? 0) + 5, ViewBag.PageCount);
        }
        @for (int i = minPage; i <= maxPage; i++)
        {
            string classForThis = i == ViewBag.CurrentPage ? "active" : String.Empty;
            <li class="@classForThis">
                @Html.ActionLink((i + 1).ToString(), actionName, new { page = i })
            </li>
        }
        <li class="@classForNext"><a href='@Url.Action(actionName, new { page = (ViewBag.CurrentPage + 1) })'>&rarr;</a></li>
    </ul>
</div>

@section AdditionalScripts {
    <script src="~/Scripts/App/errorlogger.js"></script>
    <script>       
        function onSearchSuccess(data, status, xhr) {
            $('#pager').hide();
            $('#progressBar').hide();
            $('#btnClear').show();
        }

        function onSearchFail(xhr, status, error) {
            $('#progressBar').hide();
            tubs.notify('Search Failed', xhr, status);
        }
    </script>
}