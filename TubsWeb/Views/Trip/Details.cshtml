@model TubsWeb.ViewModels.TripSummaryViewModel
@using Spc.Ofp.Tubs.DAL.Entities

@* For now, create this in the View. *@
@{
    IEnumerable<Tuple<string, string>> crumbs = new List<Tuple<string, string>>()
    {
        Tuple.Create(Url.RouteUrl("TripList"), "Trips"),
        Tuple.Create("#", Model.SpcTripNumber)
    };
}

@{ Html.RenderPartial("_BreadCrumbs", crumbs); }

<div class="tabbable tabs-top">
    <ul id="summarySections" class="nav nav-tabs">
        <li class="active" id="summaryTab"><a href="#summary" data-toggle="tab">Summary</a></li>
        <li id="downloadTab"><a href="#downloads" data-toggle="tab">Downloads</a></li>        
        <li><a href="#map" data-toggle="tab">Map</a></li>
    </ul>
    <div class="tab-content">
        <div class="tab-pane active" id="summary">
            @{ Html.RenderPartial("_TripSummary", Model); }
        </div>
        <div class="tab-pane" id="downloads">
            @{ Html.RenderPartial("_Downloads", Model); }
        </div>
        <div class="tab-pane" id="map">
            <div id="mapX" style="width: 600px; height: 400px;"></div>
        </div>
    </div>
</div>


@* The following infrastructure moves the trip close form to a Bootstrap modal form *@
<div id="closeModal" class="modal hide fade" tabindex="-1" role="dialog">
    <div class="modal-header">
    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
    <h3 id="closeModalLabel">Close Trip</h3>
  </div> 
@using (Html.BeginForm("Close", "Trip", FormMethod.Post, new { @class = "form well" }))
{
    <div class="modal-body">
        <p>
            Closing a trip marks the end of data entry. After being closed, the trip will be read only and no further updates will be accepted.
        </p>        
        @Html.HiddenFor(m => Model.Id)
        <label for="Comments">Entry Comments</label>
        <textarea id="Comments" name="Comments" class="span6" rows="2" style="height: 200px;"></textarea>
    </div>
    <div class="modal-footer">
        <button class="btn" data-dismiss="modal" aria-hidden="true">Close</button>
        <button type="submit" name="Save" value="Save" class="btn btn-primary">Save</button>
    </div>
}
</div>

<ul id="tlyPageGuide" data-tourtitle="Trip data navigation">
    <li class="tlypageguide_top" data-tourtarget="#subsectionNavbar">
        <div>
            Use these links to navigate to different sections of the trip.
        </div>
    </li>
    <li class="tlypageguide_top" data-tourtarget="#crumb_1">
        <div>
            This link will always take you back to the list of all trips.
        </div>
    </li>
    <li class="tlypageguide_top" data-tourtarget="#crumb_2">
        <div>
            As you navigate through the different sections, this link will always
            return you to this page.
        </div>
    </li>
    <li class="tlypageguide_bottom" data-tourtarget="#summaryTab">
        <div>
            This tab displays a quick summary of the trip.
        </div>
    </li>
    <li class="tlypageguide_bottom" data-tourtarget="#downloadTab">
        <div>
            This tab holds links to all available downloads for this trip.
        </div>
    </li>
    <li class="tlypageguide_top" data-tourtarget="#ExpectedSeaDayCount">
        <div>
            The first number is the number of PS-2 forms that have been filled out
            for this trip.  The second number is the expected number of PS-2 forms
            for the trip based on the length of the trip in days.
        </div>
    </li>
    <li class="tlypageguide_bottom" data-tourtarget="#vesselDays">
        <div>
            The total count of days spent fishing or searching for fish.
            Any fishing or searching activities in a day is counted as a whole day.
        </div>
    </li>
    <li class="tlypageguide_bottom" data-tourtarget="#cpue">
        <div>
            Catch per unit effort.  Includes all species (including bycatch).
        </div>
    </li>
    <li class="tlypageguide_left" data-tourtarget="#coverPageLink">
        <div>
            This link will create a PDF coverpage for the trip.
        </div>
    </li>
    <li class="tlypageguide_right" data-tourtarget="#summaryPdf">
        <div>
            This link will create a PDF trip summary report.
            The summary report includes basic catch and effort information.
        </div>
    </li>
    <li class="tlypageguide_right" data-tourtarget="#summaryOther">
        <div>
            This link will take you to the report server.  Use this link if
            you want the summary report in another format like Word, Excel, or CSV.
        </div>
    </li>
    <li class="tlypageguide_bottom" data-tourtarget="#kmlLink">
        <div>
            This link will download a KML file that plots trip positions.
        </div>
    </li>
    <li class="tlypageguide_left" data-tourtarget="#lfexcelLink">
        <div>
            This link will download an Excel file that contains length frequency data for the
            entire trip.
        </div>
    </li>
</ul>

@section Sidebar {

    @{
        IEnumerable<Tuple<string, string>> navpills = ViewBag.NavPills;
        if (null != navpills)
        {
            Html.RenderPartial("_VerticalTripNavBar", navpills);
        }
    }

}

@section AdditionalCss {
    <link rel="stylesheet" href="~/Content/leaflet.css" />
}

@section AdditionalScripts {
    @* Sco.js integrates with Bootstrap and adds some useful features *@
    @System.Web.Optimization.Scripts.Render("~/bundles/scojs")
    @System.Web.Optimization.Scripts.Render("~/bundles/leaflet")
    <script>
        $(function () {
            $('.large-text').trunk8({
                fill: '&nbsp;&raquo;&nbsp;'
            });
            /* TODO:  Only execute this if it works in the current browser (read:  Not IE8 or lower) */
            tl.pg.init();
        });
    </script>
    <script>
        $(function () {
            /*
             * Couple problems with this:
             * 1) Leaflet uses a single map marker, negating the custom styling in the KML
             * 2) OSM tiles appear to be _very_ slow
             * 3) Clicking on a marker gives us the label (YAY), but it does some kind of strange auto-movement thing
             * 4) The folders in the KML aren't being respected
             * 5) The default OSM map is probably more detailed than we want
             * 6) This map should have some additional layers with EEZ, 12 mile boundary, etc.
             *
             * GeoJSON looks promising except for some different issues:
             * 1)  The only package for GeoJSON in C# is 3 years old and is not being updated
             * 2)  GeoJSON has no timestamps, so times need to go into item properties
             * 3)  There are no good examples for using the GeoJSON.Net project
             */
            L.Icon.Default.imagePath = '@Url.Content("~/Content/images")';
            var map = new L.Map('mapX');
            var osm = new L.TileLayer.OpenStreetMap();
            var track = new L.KML('@Url.Action("Positions", "Trip", new { tripId = ViewBag.TripId }, this.Request.Url.Scheme)');
            track.on("loaded", function (e) {
                map.fitBounds(e.target.getBounds());
            });
            map.addLayer(track);
            map.addLayer(osm);
            map.addControl(new L.Control.Layers({}, { 'Track': track }));
        });
    </script>
}
