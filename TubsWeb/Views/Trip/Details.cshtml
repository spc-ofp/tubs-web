@model TubsWeb.ViewModels.TripSummaryViewModel
@using Spc.Ofp.Tubs.DAL.Entities

@* For now, create this in the View. *@
@{
    IEnumerable<Tuple<string, string>> crumbs = new List<Tuple<string, string>>()
    {
        Tuple.Create(Url.RouteUrl("TripList"), "Trips"),
        Tuple.Create("#", Model.SpcTripNumber)
    };
}

@{ Html.RenderPartial("_BreadCrumbs", crumbs); }

<div class="tabbable tabs-top">
    <ul id="summarySections" class="nav nav-tabs">
        <li class="active" id="summaryTab"><a href="#summary" data-toggle="tab">Summary</a></li>
        <li id="downloadTab"><a href="#downloads" data-toggle="tab">Downloads</a></li>        
        <li><a href="#map" data-toggle="tab">Map</a></li>
    </ul>
    <div class="tab-content">
        <div class="tab-pane active" id="summary">
            @{ Html.RenderPartial("_TripSummary", Model); }
        </div>
        <div class="tab-pane" id="downloads">
            @{ Html.RenderPartial("_Downloads", Model); }
        </div>
        <div class="tab-pane" id="map">
            <div id="mapX" style="width: 700px; height: 500px;"></div>
        </div>
    </div>
</div>

@* The following infrastructure moves the trip close form to a Bootstrap modal form *@
<div id="closeModal" class="modal hide fade" tabindex="-1" role="dialog">
    <div class="modal-header">
    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
    <h3 id="closeModalLabel">Close Trip</h3>
  </div> 
@using (Html.BeginForm("Close", "Trip", FormMethod.Post, new { @class = "form well" }))
{
    <div class="modal-body">
        <p>
            Closing a trip marks the end of data entry. After being closed, the trip will be read only and no further updates will be accepted.
        </p>        
        @Html.HiddenFor(m => Model.Id)
        <label for="Comments">Entry Comments</label>
        <textarea id="Comments" name="Comments" class="span6" rows="2" style="height: 200px;"></textarea>
    </div>
    <div class="modal-footer">
        <button class="btn" data-dismiss="modal" aria-hidden="true">Close</button>
        <button type="submit" name="Save" value="Save" class="btn btn-primary">Save</button>
    </div>
}
</div>

<ul id="tlyPageGuide" data-tourtitle="Trip data navigation">
    <li class="tlypageguide_top" data-tourtarget="#subsectionNavbar">
        <div>
            Use these links to navigate to different sections of the trip.
        </div>
    </li>
    <li class="tlypageguide_top" data-tourtarget="#crumb_1">
        <div>
            This link will always take you back to the list of all trips.
        </div>
    </li>
    <li class="tlypageguide_top" data-tourtarget="#crumb_2">
        <div>
            As you navigate through the different sections, this link will always
            return you to this page.
        </div>
    </li>
    <li class="tlypageguide_bottom" data-tourtarget="#summaryTab">
        <div>
            This tab displays a quick summary of the trip.
        </div>
    </li>
    <li class="tlypageguide_bottom" data-tourtarget="#downloadTab">
        <div>
            This tab holds links to all available downloads for this trip.
        </div>
    </li>
    <li class="tlypageguide_top" data-tourtarget="#ExpectedSeaDayCount">
        <div>
            The first number is the number of PS-2 forms that have been filled out
            for this trip.  The second number is the expected number of PS-2 forms
            for the trip based on the length of the trip in days.
        </div>
    </li>
    <li class="tlypageguide_bottom" data-tourtarget="#vesselDays">
        <div>
            The total count of days spent fishing or searching for fish.
            Any fishing or searching activities in a day is counted as a whole day.
        </div>
    </li>
    <li class="tlypageguide_bottom" data-tourtarget="#cpue">
        <div>
            Catch per unit effort.  Includes all species (including bycatch).
        </div>
    </li>
    <li class="tlypageguide_left" data-tourtarget="#coverPageLink">
        <div>
            This link will create a PDF coverpage for the trip.
        </div>
    </li>
    <li class="tlypageguide_right" data-tourtarget="#summaryPdf">
        <div>
            This link will create a PDF trip summary report.
            The summary report includes basic catch and effort information.
        </div>
    </li>
    <li class="tlypageguide_right" data-tourtarget="#summaryOther">
        <div>
            This link will take you to the report server.  Use this link if
            you want the summary report in another format like Word, Excel, or CSV.
        </div>
    </li>
    <li class="tlypageguide_bottom" data-tourtarget="#kmlLink">
        <div>
            This link will download a KML file that plots trip positions.
        </div>
    </li>
    <li class="tlypageguide_left" data-tourtarget="#lfexcelLink">
        <div>
            This link will download an Excel file that contains length frequency data for the
            entire trip.
        </div>
    </li>
</ul>

@section Sidebar {

    @{
        IEnumerable<Tuple<string, string>> navpills = ViewBag.NavPills;
        if (null != navpills)
        {
            Html.RenderPartial("_VerticalTripNavBar", navpills);
        }
    }

}

@section AdditionalCss {
    <link rel="stylesheet" href="~/Content/OpenLayers/theme/default/style.tidy.css" />
}

@section AdditionalScripts {
    @* Sco.js integrates with Bootstrap and adds some useful features *@
    @System.Web.Optimization.Scripts.Render("~/bundles/scojs")
    <script>
        $(function () {
            $('.large-text').trunk8({
                fill: '&nbsp;&raquo;&nbsp;'
            });
            /* TODO:  Only execute this if it works in the current browser (read:  Not IE8 or lower) */
            tl.pg.init();
        });
    </script>
    @* 
     * openlayers Bundle includes OpenLayers script _plus_ javascript for creating a trip map.
     *@
    @System.Web.Optimization.Scripts.Render("~/bundles/openlayers")
    <script>
        // This isn't in the bundle since it needs to be set in Razor
        OpenLayers.ImgPath = '@Url.Content("~/Content/OpenLayers/img")';
        $(function () {
            // NOTE:  tubs-openlayers.js (in ~/bundles/openlayers) adds a global 'map' variable.
            map = new OpenLayers.Map('mapX', { theme: null });
            var layer = new OpenLayers.Layer.XYZ(
              "Layer",
              ["http://nouofputil01/mbtiles/test/${z}/${x}/${y}.png"],
              {
                  sphericalMercator: true,
                  attribution: "CROP &copy; ",
                  wrapDateLine: true,
                  numZoomLevels: 9
              }
            );
            var kml = new OpenLayers.Layer.Vector("KML", {
                strategies: [new OpenLayers.Strategy.Fixed()],
                protocol: new OpenLayers.Protocol.HTTP({
                    url: '@Url.Action("Positions", "Trip", new { tripId = ViewBag.TripId })',
                    format: new OpenLayers.Format.KML({
                        extractStyles: true,
                        extractAttributes: true,
                        maxDepth: 2
                    })
                })
            });

            // Add layers to the map
            map.addLayers([layer, kml]);

            // TODO:  KML folders
            // TODO:  Center map correctly

            // Set the map's initial center point
            var center = new OpenLayers.LonLat(150, -9.0).transform(epsg4326, map.getProjectionObject());
            map.setCenter(center, 5);

            var click = new OpenLayers.Control.Click();
            map.addControl(click);
            click.activate();
        });
    </script>
}
