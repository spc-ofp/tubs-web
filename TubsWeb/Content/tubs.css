/*
 * This file is part of TUBS.
 *
 * TUBS is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *  
 * TUBS is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *  
 * You should have received a copy of the GNU Affero General Public License
 * along with TUBS.  If not, see <http://www.gnu.org/licenses/>.
 */

/* NOTE:  It would probably be useful to migrate from straight-out-of-the-box Bootstrap to
 * one of the Less/Sass versions and then muck with font sizes and control heights to jam
 * more stuff onto the page.
 * Default Bootstrap is good for low-volume forms, but there's a lot of white space
 * inside the controls.
 */    

/*
 * Sticky footer implementation.
 * Okay as far as it goes, but could use some work.   
 */
html, body {
    height: 100%;
}

footer 
{
    padding: 20px 0 20px 0;
    border-top: 1px solid #000;
}

.wrapper {
    min-height: 100%;
    height: auto !important;
    height: 100%;
    margin: 0 auto -63px;
}

.push {
    height: 63px;
}
        
.wrapper > .container,
.wrapper > .container-fluid {
    padding-top: 60px;
}

img.app-logo
{
    float:left;
    margin-right: 10px;
    margin-left: 10px;
}

img.summary
{
    float: left;
    margin-right: 10px;
    margin-left: -5px;
}

div.summary
{
    float: right;
}

/*
 * 'dense' ordered list is a merger of the following techniques:
 * http://www.456bereastreet.com/archive/201105/styling_ordered_list_numbers/
 * (Boxes around numbers etc.)
 * http://designshack.net/articles/css/5-simple-and-practical-css-list-styles-you-can-copy-and-paste/
 * Approach of forcing a child entity to hold the numeric list value.
 */
ol.dense > li
{
    list-style:none;
}

/* 
 * There's some work to be done here to get the color scheme to match up better with
 * Bootstrap.  Still, the extra emphasis should make for a better UX.
 * A potential enhancement to this is to use some additional classes to highlight
 * specific information (e.g. low/exact/high samples per brail)
 * Assuming the same CSS is used in the actual LF entry/display pages, the box color could
 * highlight high/low values per species.
 */
ol.dense > li > span
{
    top:-2px;
    left:-2em;
    -moz-box-sizing:border-box;
    -webkit-box-sizing:border-box;
    box-sizing:border-box;
    width:2em;
    margin-right:8px;
    padding:4px;
    /*border-top:2px solid #666;*/
    color:#fff;
    background:#666;
    font-weight:bold;
    font-family:"Helvetica Neue", Arial, sans-serif;
    text-align:center;
}

/* div.compact-header, div.compact-row, editor-row, and span1q are all part of using divs to contain multi-row inputs instead of a table */
.editor-row
{
    margin-left: 10px;
}

/* Bigger than span1 (60px), but smaller than span2 (140px) */
.span1q
{
    width: 80px;
}

/*
 * compact-header resets the margin on
 * a div inside a row-fluid.
 * Use this for the header labels
 * This is part of rebuilding multiple row forms
 * using multiple divs instead of a table
 */
.row-fluid div.compact-header {
    margin-left: 5px;
}

.row div.compact-header
{
    margin-left: 10px;
}

/*
 * compact-row adds some padding to the
 * row containing the form.  Without this, the
 * HTML inputs would sit on top of one another.
 */
div.compact-row {
    padding-bottom: 5px;
}

/* We can no longer depend on top padding body to ensure that all content falls below the toolbar */
.padded {
    padding-top: 60px;
}

/*
 * snap-content is transparent without an explicit background color
 * http://stackoverflow.com/questions/16726270/twitter-bootstrap-and-snap-js
 */
.snap-content {
    background: white;
}

/* 
 * Bootstrap adds a 10 pixel bottom margin to all inputs.  This is undesirable in a table, so turn it off.
 * The final entry, with the 'not([type])' is there to manage inputs without any type.
 * It's not perfect, but it prevents a truly hideous display.
 */
.table td input[type="text"],
.table td input[type="number"],
.table td input:not([type])
{
    display: inline-block;
    height: 20px;
    padding: 4px 6px;
    margin-bottom: 0px;
    font-size: 14px;
    line-height: 20px;
    color: #555555;
    vertical-align: middle;
    -webkit-border-radius: 4px;
       -moz-border-radius: 4px;
            border-radius: 4px;
    
}

.table td .control-group,
.table td select
{
    margin-bottom: 0px;
}

.nobr
{ 
    white-space: nowrap;
}

.lookatme {
color: Red;
font-weight: bold;
}

.input-validation-error 
{
    /* Bootstrap is overriding the color:  In MVC3, this was handled by hooking the validator...*/
    color: #b94a48;
    font-weight: bold;
}


/* Try this: http://html.cita.illinois.edu/nav/form/checkbox/index.php?example=4 */

/* Works but ugly*/
input[type=checkbox]:focus {
    outline: 3px solid blue;
}

/* http://css-tricks.com/the-checkbox-hack/
input[type=checkbox]:focus ~ label {
    background: red;
}
*/

/*
* This isn't working either:
* http://codepen.io/joshnh/pen/eIksb

label:focus,
label + input:focus {
    background-color: #fa3;
}
*/

/*
 * closed-ribbon is a repurposing of the fairly common 'fork on GitHub' ribbon
 * found on OSS software project pages
 * This implementation is from here:
 * http://codepo8.github.io/css-fork-on-github-ribbon/
 * The one problem is that it steps on the PageGuide fly-out.
 * One potential fix is to put it into one of the bottom corners.
 */
 
#closed-ribbon a {
    background:#00f;
    color:#fff;
    text-decoration:none;
    font-family:arial, sans-serif;
    text-align:center;
    font-weight:bold;
    padding:5px 40px;
    font-size:1rem;
    line-height:2rem;
    position:relative;
    transition:0.5s;
}

#closed-ribbon a:hover {
    background:#0ff;
    color:#fff;
}

#closed-ribbon a::before,
#closed-ribbon a::after {
    content:"";
    width:100%;
    display:block;
    position:absolute;
    top:1px;
    left:0;
    height:1px;
    background:#fff;
}

#closed-ribbon a::after {
    bottom:1px;
    top:auto;
}

@media screen and (min-width:800px){
    #closed-ribbon {
        position:absolute;
        display:block;
        top:40px;
        right:0;
        width:200px;
        overflow:hidden;
        height:200px;

    }
    #closed-ribbon a {
        width:200px;
        position:absolute;
        top:40px;
        right:-60px;       
        -webkit-transform:rotate(45deg);
                transform:rotate(45deg);
        box-shadow:4px 4px 10px rgba(0,0,0,0.8);
    }
}
