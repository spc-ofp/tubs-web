<div id="qunit"></div>
<div id="qunit-fixture"></div>

@Html.ActionLink("Back to Tests", "Index", "UnitTest")

@section ScriptsUnderTest {
    @* Scripts under test *@
    <script src="~/Scripts/App/vm.gen2.js"></script>
}

@section TestData {
    <script>
        var modelAsJson = {
            "SexCodes": [
              "",
              "M",
              "F",
              "I",
              "U"
            ],
            "LengthCodes": [
              "",
              "UF",
              "LF",
              "TW",
              "TL",
              "CL"
            ],
            "ConditionCodes": [
              "",
              "A0",
              "A1",
              "A2",
              "A3",
              "A4",
              "A5",
              "A6",
              "A7",
              "A8",
              "D",
              "D1",
              "D2",
              "D3",
              "D4",
              "U",
              "U1",
              "U2",
              "U3",
              "U4"
            ],
            "Activities": [
              "",
              "Setting",
              "Hauling",
              "Searching",
              "Transiting",
              "Other"
            ],
            "LandedConditionCode": "A1",
            "LandedConditionDescription": "THE TURTLE WHEN PICKED FROM THE NET LOOKING HEALTHY AND NOT DISTRESSED.",
            "LandedHandling": "IT WAS ENTANGLED OK WHEN REMOVED FROM NET.  WAS ALIVE & HEALTHY.  PUT ON DECK FOR ME TO SAMPLE",
            "LandedLength": 35.0,
            "LandedLengthCode": "CL",
            "LandedSexCode": "F",
            "DiscardedConditionCode": "A5",
            "DiscardedConditionDescription": "WHEN LOWERED INTO THE SWAM AWAY VERY FAST AS IF NOT ENTANGLED IN NET BUT LIVELY.",
            "RetrievedTagNumber": null,
            "RetrievedTagType": null,
            "RetrievedTagOrganization": null,
            "PlacedTagNumber": null,
            "PlacedTagType": null,
            "PlacedTagOrganization": null,
            "TripNumber": "DJB / 10-04",
            "TripId": 12607,
            "Id": 2965,
            "ShipsDate": "2010-11-08T00:00:00",
            "ShipsTime": "0520",
            "Latitude": "0941.789S",
            "Longitude": "15541.018E",
            "SpeciesCode": "TTL",
            "SpeciesDescription": "FIVE PAIR OF COSTAL SCUTES.  THE FIRST PAIR IS IN CONTACT WITH THE NUCHAL SCUTE AND HAS A LARGE HEAD VERY DISTINCT",
            "InteractionType": "TubsWeb.ViewModels.Gen2LandedViewModel",
            "PageNumber": 1,
            "HasNext": true,
            "NextPage": 2,
            "HasPrevious": true,
            "PreviousPage": 0,
            "ActionName": "Edit"
        };
    </script>
}

@section TestScript {
    @* Unit tests here *@
    <script>
        var viewmodel;
        module("GEN-2 Landing", {
            setup: function () {
                viewmodel = new tubs.Gen2LandedEvent(modelAsJson);
            },
            teardown: function () {
                viewmodel = null;
            }
        });
        test("Create viewmodel", function () {
            ok(viewmodel, "ViewModel not null");
            equal(viewmodel.TripNumber(), "DJB / 10-04", "TripNumber correct");
            equal(viewmodel.InteractionType(), "TubsWeb.ViewModels.Gen2LandedViewModel", "Type mapped correctly");
            equal(viewmodel.LandedConditionCode(), "A1", "Landed condition code mapped correctly");
        });
        test("Dirty flag", function () {
            equal(viewmodel.isDirty(), false, "viewmodel is clean");
            viewmodel.SpeciesDescription("With a purposeful grimace and a terrible sound, He pulls the spitting high-tension wires down.");
            ok(viewmodel.isDirty(), "viewmodel is dirty");
            viewmodel.clearDirtyFlag();
            equal(viewmodel.isDirty(), false, "viewmodel is clean after reset");
            // Uncomment when this moves to knockout.viewmodel plugin
            //ko.viewmodel.updateFromModel(viewmodel, modelAsJson);
            //equal(viewmodel.isDirty(), false, "reloaded viewmodel is clean");
        });
        test("Async commands", function () {
            equal(viewmodel.reloadCommand.canExecute(), false, "reload blocked on clean viewmodel");
            equal(viewmodel.saveCommand.canExecute(), false, "save blocked on clean viewmodel");
            viewmodel.SpeciesDescription("A tiger shark is furry, orange and white, right?");
            ok(viewmodel.isDirty(), "viewmodel is dirty");
            ok(viewmodel.reloadCommand.canExecute(), "reload enabled on dirty viewmodel");
            ok(viewmodel.saveCommand.canExecute(), "save enabled on dirty viewmodel");
        });
    </script>
}