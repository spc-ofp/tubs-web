<div id="qunit"></div>
<div id="qunit-fixture"></div>

@Html.ActionLink("Back to Tests", "Index", "UnitTest")

@section ScriptsUnderTest {
    @* Scripts under test *@
    <script src="~/Scripts/App/vm.sethaul.js"></script>
}

@section TestData {
    @* Inline data here *@
    <script>
        // Not exactly what comes from the server
        // Some values have been changed to protect
        // sensitive data
        var setHaulModelAsJson = {
            "BooleanValues": [
              null,
              "YES",
              "NO"
            ],
            "VelocityUnits": [
              "",
              "m/s",
              "kts"
            ],
            "ActionName": "Add",
            "TripNumber": "DJB / 11-02",
            "HasNext": true,
            "HasPrevious": true,
            "VersionNumber": 2007,
            "TripId": 4309,
            "SetId": 1004,
            "SetNumber": 2,
            "MaxSets": 10,
            "NextSet": 3,
            "PreviousSet": 1,
            "HooksPerBasket": 30,
            "TotalBaskets": 79,
            "TotalHooks": 2370,
            "FloatlineLength": 12,
            "LineSettingSpeed": 5.0,
            "LineSettingSpeedUnit": "MetersPerSecond",
            "BranchlineSetInterval": 6,
            "DistanceBetweenBranchlines": 30.0,
            "BranchlineLength": 14.0,
            "VesselSpeed": 6.0,
            "SharkLineCount": null,
            "SharkLineLength": null,
            "WasTdrDeployed": "NO",
            "IsTargetingTuna": true,
            "IsTargetingSwordfish": false,
            "IsTargetingShark": false,
            "LightStickCount": null,
            "TotalObservedBaskets": 79,
            "HasGen3Event": "N/A",
            "DiaryPage": null,
            "ShipsDate": "2011-04-19T00:00:00",
            "ShipsTime": null,
            "UtcDate": "2011-04-18T00:00:00",
            "UtcTime": "1806",
            "UnusualDetails": "TEMPERATURE EDM 27C CAP AU 300.\r\n2 PETITES HIRONDELLES A CUL  DU BATEAU",
            "StartEndPositionsObserved": "YES",
            "StartOfSet": {
                "Id": 11524,
                "DateOnly": "2011-04-19T00:00:00",
                "LocalTime": "0507",
                "Latitude": "1840.273S",
                "Longitude": "15925.237E",
                "_destroy": false,
                "NeedsFocus": false
            },
            "EndOfSet": {
                "Id": 11525,
                "DateOnly": "2011-04-19T00:00:00",
                "LocalTime": "0918",
                "Latitude": "1844.051S",
                "Longitude": "15954.224E",
                "_destroy": false,
                "NeedsFocus": false
            },
            "StartOfHaul": {
                "Id": 11526,
                "DateOnly": "2011-04-19T00:00:00",
                "LocalTime": "1256",
                "Latitude": "1844.925S",
                "Longitude": "15935.132E",
                "_destroy": false,
                "NeedsFocus": false
            },
            "EndOfHaul": {
                "Id": 11536,
                "DateOnly": "2011-04-19T00:00:00",
                "LocalTime": "2306",
                "Latitude": "1853.417S",
                "Longitude": "15951.911E",
                "_destroy": false,
                "NeedsFocus": false
            },
            "IntermediateHaulPositions": [
              {
                  "Id": 11527,
                  "DateOnly": "2011-04-19T00:00:00",
                  "LocalTime": "1400",
                  "Latitude": "1847.841S",
                  "Longitude": "15939.489E",
                  "_destroy": false,
                  "NeedsFocus": false
              },
              {
                  "Id": 11528,
                  "DateOnly": "2011-04-19T00:00:00",
                  "LocalTime": "1500",
                  "Latitude": "1848.158S",
                  "Longitude": "15940.277E",
                  "_destroy": false,
                  "NeedsFocus": false
              },
              {
                  "Id": 11529,
                  "DateOnly": "2011-04-19T00:00:00",
                  "LocalTime": "1600",
                  "Latitude": "1849.296S",
                  "Longitude": "15943.145E",
                  "_destroy": false,
                  "NeedsFocus": false
              },
              {
                  "Id": 11535,
                  "DateOnly": "2011-04-19T00:00:00",
                  "LocalTime": "2200",
                  "Latitude": "1852.982S",
                  "Longitude": "15951.751E",
                  "_destroy": false,
                  "NeedsFocus": false
              }
            ],
            "Comments": [
                {
                    "Id": 12345,
                    "DateOnly": "2011-04-19T00:00:00",
                    "LocalTime": "1400",
                    "Details": "Lorem ipsum blah blah blah",
                    "_destroy": false,
                    "NeedsFocus": false
                },
            ]
        };
    </script>
}

@section TestScript {
    @* Unit tests here *@
    <script>
        /// <reference path="../qunit-1.11.0.js" />
        /// 
        'use strict';
        var viewmodel;

        module("Longline SetHaul", {
            setup: function () {
                viewmodel = new tubs.SetHaul(setHaulModelAsJson);
            },
            teardown: function () {
                viewmodel = null;
            }
        });
        test("Create viewmodel", function () {
            ok(viewmodel, "ViewModel not null");
            equal(viewmodel.TripNumber(), "DJB / 11-02", "TripNumber correct");
            equal(viewmodel.IntermediateHaulPositions().length, 4, "ViewModel has 4 intermediate haul positions");
            equal(viewmodel.Comments().length, 1, "ViewModel has 1 comments");
            equal(viewmodel.ShipsDate.formattedDate(), "19/04/11", "ShipsDate formatted correctly");
        });
        test("Dirty flag", function () {
            equal(viewmodel.isDirty(), false, "viewmodel is clean");
            // Change property on the root
            viewmodel.HooksPerBasket(123);
            ok(viewmodel.isDirty(), "viewmodel is dirty");
        });
        test("Async commands", function () {
            equal(viewmodel.reloadCommand.canExecute(), false, "reload blocked on clean viewmodel");
            equal(viewmodel.saveCommand.canExecute(), false, "save blocked on clean viewmodel");
            viewmodel.TotalObservedBaskets(99);
            ok(viewmodel.isDirty(), "viewmodel is dirty");
            ok(viewmodel.reloadCommand.canExecute(), "reload enabled on dirty viewmodel");
            ok(viewmodel.saveCommand.canExecute(), "save enabled on dirty viewmodel");
        });
        test("Modify StartOfSet", function () {
            ok(!viewmodel.isDirty(), "viewmodel is clean");
            viewmodel.StartOfSet.LocalTime("0459");
            ok(viewmodel.isDirty(), "viewmodel is dirty");
        });
        test("StartOfSet DateOnly", function () {
            ok(!viewmodel.isDirty(), "viewmodel is clean");
            equal(viewmodel.StartOfSet.DateOnly.formattedDate(), "19/04/11", "Extended with ISODate");
            viewmodel.StartOfSet.DateOnly("2012-04-19T00:00:00");
            equal(viewmodel.StartOfSet.DateOnly.formattedDate(), "19/04/12", "ISODate reacts");
            ok(viewmodel.isDirty(), "viewmodel is dirty");
        });
        test("Modify EndOfSet", function () {
            ok(!viewmodel.isDirty(), "viewmodel is clean");
            viewmodel.EndOfSet.LocalTime("0459");
            ok(viewmodel.isDirty(), "viewmodel is dirty");
        });
        test("EndOfSet DateOnly", function () {
            ok(!viewmodel.isDirty(), "viewmodel is clean");
            equal(viewmodel.EndOfSet.DateOnly.formattedDate(), "19/04/11", "Extended with ISODate");
            viewmodel.EndOfSet.DateOnly("2012-04-19T00:00:00");
            equal(viewmodel.EndOfSet.DateOnly.formattedDate(), "19/04/12", "ISODate reacts");
            ok(viewmodel.isDirty(), "viewmodel is dirty");
        });
        test("Modify StartOfHaul", function () {
            ok(!viewmodel.isDirty(), "viewmodel is clean");
            viewmodel.StartOfHaul.LocalTime("0459");
            ok(viewmodel.isDirty(), "viewmodel is dirty");
        });
        test("StartOfHaul DateOnly", function () {
            ok(!viewmodel.isDirty(), "viewmodel is clean");
            equal(viewmodel.StartOfHaul.DateOnly.formattedDate(), "19/04/11", "Extended with ISODate");
            viewmodel.StartOfHaul.DateOnly("2012-04-19T00:00:00");
            equal(viewmodel.StartOfHaul.DateOnly.formattedDate(), "19/04/12", "ISODate reacts");
            ok(viewmodel.isDirty(), "viewmodel is dirty");
        });
        test("Modify EndOfHaul", function () {
            ok(!viewmodel.isDirty(), "viewmodel is clean");
            viewmodel.EndOfHaul.LocalTime("0459");
            ok(viewmodel.isDirty(), "viewmodel is dirty");
        });
        test("EndOfHaul DateOnly", function () {
            ok(!viewmodel.isDirty(), "viewmodel is clean");
            equal(viewmodel.EndOfHaul.DateOnly.formattedDate(), "19/04/11", "Extended with ISODate");
            viewmodel.EndOfHaul.DateOnly("2012-04-19T00:00:00");
            equal(viewmodel.EndOfHaul.DateOnly.formattedDate(), "19/04/12", "ISODate reacts");
            ok(viewmodel.isDirty(), "viewmodel is dirty");
        });
        test("Modify intermediate position property", function () {
            ok(!viewmodel.isDirty(), "viewmodel is clean");
            viewmodel.IntermediateHaulPositions()[0].LocalTime("0001");
            ok(viewmodel.isDirty(), "viewmodel is dirty");
        });
        test("Add/remove new intermediate position", function () {
            ok(!viewmodel.isDirty(), "viewmodel is clean");
            equal(viewmodel.IntermediateHaulPositions().length, 4, "ViewModel has 4 intermediate haul positions");
            viewmodel.addPosition();
            equal(viewmodel.IntermediateHaulPositions().length, 5, "ViewModel has 5 intermediate haul positions");
            ok(viewmodel.isDirty(), "viewmodel is dirty");
            var pos = viewmodel.IntermediateHaulPositions().slice(-1)[0];
            ok(pos, "New item not null");
            ok(pos.NeedsFocus(), "New item has focus");
            equal(pos.DateOnly.formattedDate(), "19/04/11", "New position has ISODate");
            equal(pos.Id(), 0, "New item Id is 0");
        });
        test("Remove existing intermediate position", function () {
            ok(!viewmodel.isDirty(), "viewmodel is clean");
            equal(viewmodel.IntermediateHaulPositions().length, 4, "ViewModel has 4 intermediate haul positions");
            var pos = viewmodel.IntermediateHaulPositions()[0];
            viewmodel.removePosition(pos);
            equal(viewmodel.IntermediateHaulPositions().length, 4, "ViewModel has 4 intermediate haul positions");
            ok(viewmodel.isDirty(), "viewmodel is dirty");
            ok(pos._destroy, "Removed item marked for destruction");
        });
        test("Add/remove new comment", function () {
            ok(!viewmodel.isDirty(), "viewmodel is clean");
            equal(viewmodel.Comments().length, 1, "ViewModel has 1 comment");
            viewmodel.addComment();
            equal(viewmodel.Comments().length, 2, "ViewModel has 2 comments");
            ok(viewmodel.isDirty(), "viewmodel is dirty");
            var comment = viewmodel.Comments().slice(-1)[0];
            ok(comment, "New item not null");
            equal(comment.DateOnly.formattedDate(), "19/04/11", "New comment has ISODate");
            ok(comment.NeedsFocus(), "New item has focus");
            equal(comment.Id(), 0, "New item Id is 0");
        });
        test("Remove existing comment", function () {
            ok(!viewmodel.isDirty(), "viewmodel is clean");
            equal(viewmodel.Comments().length, 1, "ViewModel has 1 comment");
            var comment = viewmodel.Comments()[0];
            viewmodel.removeComment(comment);
            equal(viewmodel.Comments().length, 1, "ViewModel has 1 comment");
            ok(viewmodel.isDirty(), "viewmodel is dirty");
            ok(comment._destroy, "Removed item marked for destruction");
        });
    </script>
}
